
CumBanhSwerve.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005170  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08005280  08005280  00015280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005330  08005330  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005330  08005330  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005330  08005330  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005330  08005330  00015330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005334  08005334  00015334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013ac  20000018  0800534c  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200013c4  0800534c  000213c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eeb0  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c4  00000000  00000000  0002eeed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  000315b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db0  00000000  00000000  00032490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cf6  00000000  00000000  00033240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f692  00000000  00000000  0004bf36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fc03  00000000  00000000  0005b5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb1cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e8c  00000000  00000000  000eb21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08005268 	.word	0x08005268

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08005268 	.word	0x08005268

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <Pid_SetParam>:
#include "stdlib.h"

 #ifdef PID_EN
//-----------------------------------------------Begin: Setting Parameter for PID------------------------------------------//
void Pid_SetParam(PID_Param *pid,double kP,double kI,double kD,double alpha,double deltaT,double uI_AboveLimit,double uI_BelowLimit,double u_AboveLimit,double u_BelowLimit)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	e9c7 2300 	strd	r2, r3, [r7]
//----------------------Term-----------------------//
	pid->kP = kP;
 8000a58:	68f9      	ldr	r1, [r7, #12]
 8000a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a5e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	pid->kI = kI;
 8000a62:	68f9      	ldr	r1, [r7, #12]
 8000a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000a68:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	pid->kD = kD;
 8000a6c:	68f9      	ldr	r1, [r7, #12]
 8000a6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000a72:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	pid->alpha = alpha;
 8000a76:	68f9      	ldr	r1, [r7, #12]
 8000a78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000a7c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
//----------------------Sample Time----------------//
	pid->deltaT = deltaT;
 8000a80:	68f9      	ldr	r1, [r7, #12]
 8000a82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000a86:	e9c1 2308 	strd	r2, r3, [r1, #32]
//----------------------Limit----------------------//
	pid->uI_AboveLimit = uI_AboveLimit;
 8000a8a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000a8e:	f7ff ffb5 	bl	80009fc <__aeabi_d2iz>
 8000a92:	4602      	mov	r2, r0
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	651a      	str	r2, [r3, #80]	; 0x50
	pid->uI_BelowLimit = uI_BelowLimit;
 8000a98:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000a9c:	f7ff ffae 	bl	80009fc <__aeabi_d2iz>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	655a      	str	r2, [r3, #84]	; 0x54
	pid->u_AboveLimit = u_AboveLimit;
 8000aa6:	68f9      	ldr	r1, [r7, #12]
 8000aa8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000aac:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	pid->u_BelowLimit = u_BelowLimit;
 8000ab0:	68f9      	ldr	r1, [r7, #12]
 8000ab2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000ab6:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
}
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <Pid_Cal>:
//------------------------------------------------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------Begin: Calculating PID---------------------------------------------------//

void Pid_Cal(PID_Param *pid,double Target,double CurrVal)
{
 8000ac4:	b5b0      	push	{r4, r5, r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	e9c7 2300 	strd	r2, r3, [r7]
//-----------------------Input-------------------------//
	pid->Target = Target;
 8000ad0:	68f9      	ldr	r1, [r7, #12]
 8000ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ad6:	e9c1 2300 	strd	r2, r3, [r1]
	pid->CurrVal = CurrVal;
 8000ada:	68f9      	ldr	r1, [r7, #12]
 8000adc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ae0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pid->e = pid->Target - pid->CurrVal;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000af0:	f7ff fb32 	bl	8000158 <__aeabi_dsub>
 8000af4:	4602      	mov	r2, r0
 8000af6:	460b      	mov	r3, r1
 8000af8:	68f9      	ldr	r1, [r7, #12]
 8000afa:	e9c1 2304 	strd	r2, r3, [r1, #16]

//-----------------------Propotion Term----------------//
	pid->uP = pid->kP*pid->e;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000b0a:	f7ff fcdd 	bl	80004c8 <__aeabi_dmul>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	460b      	mov	r3, r1
 8000b12:	68f9      	ldr	r1, [r7, #12]
 8000b14:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

//-----------------------Integral Term-----------------//
	pid->uI = pid->uI_Pre + pid->kI*pid->e*pid->deltaT;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000b2a:	f7ff fccd 	bl	80004c8 <__aeabi_dmul>
 8000b2e:	4602      	mov	r2, r0
 8000b30:	460b      	mov	r3, r1
 8000b32:	4610      	mov	r0, r2
 8000b34:	4619      	mov	r1, r3
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000b3c:	f7ff fcc4 	bl	80004c8 <__aeabi_dmul>
 8000b40:	4602      	mov	r2, r0
 8000b42:	460b      	mov	r3, r1
 8000b44:	4620      	mov	r0, r4
 8000b46:	4629      	mov	r1, r5
 8000b48:	f7ff fb08 	bl	800015c <__adddf3>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	460b      	mov	r3, r1
 8000b50:	68f9      	ldr	r1, [r7, #12]
 8000b52:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pid->uI = pid->uI > pid->uI_AboveLimit ? pid->uI_AboveLimit : pid->uI;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fc47 	bl	80003f4 <__aeabi_i2d>
 8000b66:	4602      	mov	r2, r0
 8000b68:	460b      	mov	r3, r1
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	4629      	mov	r1, r5
 8000b6e:	f7ff ff3b 	bl	80009e8 <__aeabi_dcmpgt>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d007      	beq.n	8000b88 <Pid_Cal+0xc4>
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fc39 	bl	80003f4 <__aeabi_i2d>
 8000b82:	4602      	mov	r2, r0
 8000b84:	460b      	mov	r3, r1
 8000b86:	e002      	b.n	8000b8e <Pid_Cal+0xca>
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000b8e:	68f9      	ldr	r1, [r7, #12]
 8000b90:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pid->uI = pid->uI < pid->uI_BelowLimit ? pid->uI_BelowLimit : pid->uI;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fc28 	bl	80003f4 <__aeabi_i2d>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	4620      	mov	r0, r4
 8000baa:	4629      	mov	r1, r5
 8000bac:	f7ff fefe 	bl	80009ac <__aeabi_dcmplt>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d007      	beq.n	8000bc6 <Pid_Cal+0x102>
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fc1a 	bl	80003f4 <__aeabi_i2d>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	e002      	b.n	8000bcc <Pid_Cal+0x108>
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000bcc:	68f9      	ldr	r1, [r7, #12]
 8000bce:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

//-----------------------Derivative Term---------------//
	pid->uD = pid->kD*(pid->e - pid->e_Pre)/pid->deltaT;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000be4:	f7ff fab8 	bl	8000158 <__aeabi_dsub>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4620      	mov	r0, r4
 8000bee:	4629      	mov	r1, r5
 8000bf0:	f7ff fc6a 	bl	80004c8 <__aeabi_dmul>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000c02:	f7ff fd8b 	bl	800071c <__aeabi_ddiv>
 8000c06:	4602      	mov	r2, r0
 8000c08:	460b      	mov	r3, r1
 8000c0a:	68f9      	ldr	r1, [r7, #12]
 8000c0c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	pid->uD_Fil = (1-pid->alpha)*pid->uD_FilPre+pid->alpha*pid->uD;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	493c      	ldr	r1, [pc, #240]	; (8000d0c <Pid_Cal+0x248>)
 8000c1c:	f7ff fa9c 	bl	8000158 <__aeabi_dsub>
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
 8000c24:	4610      	mov	r0, r2
 8000c26:	4619      	mov	r1, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8000c2e:	f7ff fc4b 	bl	80004c8 <__aeabi_dmul>
 8000c32:	4602      	mov	r2, r0
 8000c34:	460b      	mov	r3, r1
 8000c36:	4614      	mov	r4, r2
 8000c38:	461d      	mov	r5, r3
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000c46:	f7ff fc3f 	bl	80004c8 <__aeabi_dmul>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	4620      	mov	r0, r4
 8000c50:	4629      	mov	r1, r5
 8000c52:	f7ff fa83 	bl	800015c <__adddf3>
 8000c56:	4602      	mov	r2, r0
 8000c58:	460b      	mov	r3, r1
 8000c5a:	68f9      	ldr	r1, [r7, #12]
 8000c5c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

//-----------------------Previous Value----------------//
	pid->e_Pre = pid->e;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000c66:	68f9      	ldr	r1, [r7, #12]
 8000c68:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pid->uI_Pre = pid->uI;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000c72:	68f9      	ldr	r1, [r7, #12]
 8000c74:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	pid->uD_FilPre = pid->uD_Fil;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000c7e:	68f9      	ldr	r1, [r7, #12]
 8000c80:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

//-----------------------Sum---------------------------//
	pid->u = pid->uP + pid->uI + pid->uD;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000c90:	f7ff fa64 	bl	800015c <__adddf3>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4610      	mov	r0, r2
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000ca2:	f7ff fa5b 	bl	800015c <__adddf3>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	460b      	mov	r3, r1
 8000caa:	68f9      	ldr	r1, [r7, #12]
 8000cac:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	pid->u = pid->u > pid->u_AboveLimit ? pid->u_AboveLimit : pid->u;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8000cbc:	f7ff fe94 	bl	80009e8 <__aeabi_dcmpgt>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <Pid_Cal+0x20a>
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8000ccc:	e002      	b.n	8000cd4 <Pid_Cal+0x210>
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8000cd4:	68f9      	ldr	r1, [r7, #12]
 8000cd6:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	pid->u = pid->u < pid->u_BelowLimit ? pid->u_BelowLimit : pid->u;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8000ce6:	f7ff fe61 	bl	80009ac <__aeabi_dcmplt>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <Pid_Cal+0x234>
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8000cf6:	e002      	b.n	8000cfe <Pid_Cal+0x23a>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8000cfe:	68f9      	ldr	r1, [r7, #12]
 8000d00:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

//	return pid->u;
}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d0c:	3ff00000 	.word	0x3ff00000

08000d10 <EncoderSetting>:
#endif


#ifdef ENC_EN
void EncoderSetting(EncoderRead *enc,TIM_HandleTypeDef *htim,int count_PerRevol,double deltaT)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
	enc->htim = htim;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = count_PerRevol;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	615a      	str	r2, [r3, #20]
	enc->deltaT = deltaT;
 8000d28:	68f9      	ldr	r1, [r7, #12]
 8000d2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000d2e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8000d32:	bf00      	nop
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	0000      	movs	r0, r0
	...

08000d40 <SpeedReadOnly>:
void SpeedReadOnly(EncoderRead *enc)
{
 8000d40:	b5b0      	push	{r4, r5, r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000d60:	441a      	add	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	625a      	str	r2, [r3, #36]	; 0x24
	enc->vel_Real = (enc->count_X4/enc->deltaT)/(enc->count_PerRevol)*60;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fb3d 	bl	80003f4 <__aeabi_i2d>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000d80:	f7ff fccc 	bl	800071c <__aeabi_ddiv>
 8000d84:	4602      	mov	r2, r0
 8000d86:	460b      	mov	r3, r1
 8000d88:	4614      	mov	r4, r2
 8000d8a:	461d      	mov	r5, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fb2f 	bl	80003f4 <__aeabi_i2d>
 8000d96:	4602      	mov	r2, r0
 8000d98:	460b      	mov	r3, r1
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	4629      	mov	r1, r5
 8000d9e:	f7ff fcbd 	bl	800071c <__aeabi_ddiv>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	4610      	mov	r0, r2
 8000da8:	4619      	mov	r1, r3
 8000daa:	f04f 0200 	mov.w	r2, #0
 8000dae:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <SpeedReadOnly+0x110>)
 8000db0:	f7ff fb8a 	bl	80004c8 <__aeabi_dmul>
 8000db4:	4602      	mov	r2, r0
 8000db6:	460b      	mov	r3, r1
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	e9c1 2308 	strd	r2, r3, [r1, #32]
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8000dc4:	a31e      	add	r3, pc, #120	; (adr r3, 8000e40 <SpeedReadOnly+0x100>)
 8000dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dca:	f7ff fb7d 	bl	80004c8 <__aeabi_dmul>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	4614      	mov	r4, r2
 8000dd4:	461d      	mov	r5, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000ddc:	a31a      	add	r3, pc, #104	; (adr r3, 8000e48 <SpeedReadOnly+0x108>)
 8000dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de2:	f7ff fb71 	bl	80004c8 <__aeabi_dmul>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	4620      	mov	r0, r4
 8000dec:	4629      	mov	r1, r5
 8000dee:	f7ff f9b5 	bl	800015c <__adddf3>
 8000df2:	4602      	mov	r2, r0
 8000df4:	460b      	mov	r3, r1
 8000df6:	4614      	mov	r4, r2
 8000df8:	461d      	mov	r5, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8000e00:	a311      	add	r3, pc, #68	; (adr r3, 8000e48 <SpeedReadOnly+0x108>)
 8000e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e06:	f7ff fb5f 	bl	80004c8 <__aeabi_dmul>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	4620      	mov	r0, r4
 8000e10:	4629      	mov	r1, r5
 8000e12:	f7ff f9a3 	bl	800015c <__adddf3>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	enc->vel_Pre = enc->vel_Real;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	enc->count_X4 = 0;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	f3af 8000 	nop.w
 8000e40:	ced91687 	.word	0xced91687
 8000e44:	3feb53f7 	.word	0x3feb53f7
 8000e48:	532617c2 	.word	0x532617c2
 8000e4c:	3fb2a305 	.word	0x3fb2a305
 8000e50:	404e0000 	.word	0x404e0000
 8000e54:	00000000 	.word	0x00000000

08000e58 <SpeedReadNonReset>:



void SpeedReadNonReset(EncoderRead *enc){
 8000e58:	b5b0      	push	{r4, r5, r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000e78:	441a      	add	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2200      	movs	r2, #0
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24
	enc->vel_Real = ((enc->count_X4-enc->count_Pre)/enc->deltaT)/(enc->count_PerRevol*4)*60;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff faae 	bl	80003f4 <__aeabi_i2d>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000e9e:	f7ff fc3d 	bl	800071c <__aeabi_ddiv>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4614      	mov	r4, r2
 8000ea8:	461d      	mov	r5, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fa9f 	bl	80003f4 <__aeabi_i2d>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4620      	mov	r0, r4
 8000ebc:	4629      	mov	r1, r5
 8000ebe:	f7ff fc2d 	bl	800071c <__aeabi_ddiv>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <SpeedReadNonReset+0x118>)
 8000ed0:	f7ff fafa 	bl	80004c8 <__aeabi_dmul>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	e9c1 2308 	strd	r2, r3, [r1, #32]
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8000ee4:	a31e      	add	r3, pc, #120	; (adr r3, 8000f60 <SpeedReadNonReset+0x108>)
 8000ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eea:	f7ff faed 	bl	80004c8 <__aeabi_dmul>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4614      	mov	r4, r2
 8000ef4:	461d      	mov	r5, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000efc:	a31a      	add	r3, pc, #104	; (adr r3, 8000f68 <SpeedReadNonReset+0x110>)
 8000efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f02:	f7ff fae1 	bl	80004c8 <__aeabi_dmul>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	4629      	mov	r1, r5
 8000f0e:	f7ff f925 	bl	800015c <__adddf3>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4614      	mov	r4, r2
 8000f18:	461d      	mov	r5, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8000f20:	a311      	add	r3, pc, #68	; (adr r3, 8000f68 <SpeedReadNonReset+0x110>)
 8000f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f26:	f7ff facf 	bl	80004c8 <__aeabi_dmul>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	4620      	mov	r0, r4
 8000f30:	4629      	mov	r1, r5
 8000f32:	f7ff f913 	bl	800015c <__adddf3>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	enc->vel_Pre = enc->vel_Real;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	enc->count_Pre = enc->count_X4;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	611a      	str	r2, [r3, #16]
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f5c:	f3af 8000 	nop.w
 8000f60:	ced91687 	.word	0xced91687
 8000f64:	3feb53f7 	.word	0x3feb53f7
 8000f68:	532617c2 	.word	0x532617c2
 8000f6c:	3fb2a305 	.word	0x3fb2a305
 8000f70:	404e0000 	.word	0x404e0000

08000f74 <CountRead>:

double CountRead(EncoderRead *enc,uint8_t count_mode){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	70fb      	strb	r3, [r7, #3]
	enc->count_Mode = count_mode;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	78fa      	ldrb	r2, [r7, #3]
 8000f84:	761a      	strb	r2, [r3, #24]
	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000f9e:	441a      	add	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24

	if (enc->count_Mode == count_ModeX4)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7e1b      	ldrb	r3, [r3, #24]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d107      	bne.n	8000fc6 <CountRead+0x52>
	{
		return enc->count_X4;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fa1a 	bl	80003f4 <__aeabi_i2d>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	e033      	b.n	800102e <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeX1)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7e1b      	ldrb	r3, [r3, #24]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d110      	bne.n	8000ff0 <CountRead+0x7c>
	{
		enc->count_X1 = enc->count_X4/4;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	da00      	bge.n	8000fd8 <CountRead+0x64>
 8000fd6:	3303      	adds	r3, #3
 8000fd8:	109b      	asrs	r3, r3, #2
 8000fda:	461a      	mov	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	60da      	str	r2, [r3, #12]
		return enc->count_X1;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fa05 	bl	80003f4 <__aeabi_i2d>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	e01e      	b.n	800102e <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeDegree)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7e1b      	ldrb	r3, [r3, #24]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d116      	bne.n	8001026 <CountRead+0xb2>
	{
		enc->Degree = enc->count_X4*360/(enc->count_PerRevol*4);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001000:	fb03 f202 	mul.w	r2, r3, r2
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	fb92 f3f3 	sdiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff f9f0 	bl	80003f4 <__aeabi_i2d>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		return enc->Degree;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001024:	e003      	b.n	800102e <CountRead+0xba>
	}else {
		return 0;
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	f04f 0300 	mov.w	r3, #0
	}
//	enc->count_X1 = enc->count_X4/4;
//	enc->Degree = enc->count_X4*360/enc->count_PerRevol;
}
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <BLDC_Drive_RedBoard>:


#ifdef MOTOR_EN

void BLDC_Drive_RedBoard(MotorDrive *motor,TIM_HandleTypeDef *htim1,int Input,unsigned int Channel1)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
	motor->htim1 = htim1;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	68ba      	ldr	r2, [r7, #8]
 800104a:	601a      	str	r2, [r3, #0]
	motor->Pwm = abs(Input);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	bfb8      	it	lt
 8001052:	425b      	neglt	r3, r3
 8001054:	b29a      	uxth	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	81da      	strh	r2, [r3, #14]
	motor->Channel1 = Channel1;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	615a      	str	r2, [r3, #20]
	if (Input>0)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	dd2f      	ble.n	80010c6 <BLDC_Drive_RedBoard+0x8e>
	{
		HAL_GPIO_WritePin(DirBLDC_GPIO_Port, DirBLDC_Pin, 1);
 8001066:	2201      	movs	r2, #1
 8001068:	2101      	movs	r1, #1
 800106a:	4831      	ldr	r0, [pc, #196]	; (8001130 <BLDC_Drive_RedBoard+0xf8>)
 800106c:	f001 fb35 	bl	80026da <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d106      	bne.n	8001086 <BLDC_Drive_RedBoard+0x4e>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	89da      	ldrh	r2, [r3, #14]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		HAL_GPIO_WritePin(DirBLDC_GPIO_Port, DirBLDC_Pin, 0);
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
	}
}
 8001084:	e04f      	b.n	8001126 <BLDC_Drive_RedBoard+0xee>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	2b04      	cmp	r3, #4
 800108c:	d107      	bne.n	800109e <BLDC_Drive_RedBoard+0x66>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	89d9      	ldrh	r1, [r3, #14]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	460b      	mov	r3, r1
 800109a:	6393      	str	r3, [r2, #56]	; 0x38
 800109c:	e043      	b.n	8001126 <BLDC_Drive_RedBoard+0xee>
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	2b08      	cmp	r3, #8
 80010a4:	d107      	bne.n	80010b6 <BLDC_Drive_RedBoard+0x7e>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	89d9      	ldrh	r1, [r3, #14]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	460b      	mov	r3, r1
 80010b2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80010b4:	e037      	b.n	8001126 <BLDC_Drive_RedBoard+0xee>
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	89d9      	ldrh	r1, [r3, #14]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	460b      	mov	r3, r1
 80010c2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80010c4:	e02f      	b.n	8001126 <BLDC_Drive_RedBoard+0xee>
		HAL_GPIO_WritePin(DirBLDC_GPIO_Port, DirBLDC_Pin, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2101      	movs	r1, #1
 80010ca:	4819      	ldr	r0, [pc, #100]	; (8001130 <BLDC_Drive_RedBoard+0xf8>)
 80010cc:	f001 fb05 	bl	80026da <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d106      	bne.n	80010e6 <BLDC_Drive_RedBoard+0xae>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	89da      	ldrh	r2, [r3, #14]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010e4:	e01f      	b.n	8001126 <BLDC_Drive_RedBoard+0xee>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d107      	bne.n	80010fe <BLDC_Drive_RedBoard+0xc6>
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	89d9      	ldrh	r1, [r3, #14]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	460b      	mov	r3, r1
 80010fa:	6393      	str	r3, [r2, #56]	; 0x38
}
 80010fc:	e013      	b.n	8001126 <BLDC_Drive_RedBoard+0xee>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	2b08      	cmp	r3, #8
 8001104:	d107      	bne.n	8001116 <BLDC_Drive_RedBoard+0xde>
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	89d9      	ldrh	r1, [r3, #14]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	460b      	mov	r3, r1
 8001112:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001114:	e007      	b.n	8001126 <BLDC_Drive_RedBoard+0xee>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	89d9      	ldrh	r1, [r3, #14]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	460b      	mov	r3, r1
 8001122:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001124:	e7ff      	b.n	8001126 <BLDC_Drive_RedBoard+0xee>
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40010800 	.word	0x40010800

08001134 <DC_Drive_BTS>:

void DC_Drive_BTS(MotorDrive *motor,TIM_HandleTypeDef *htim1,uint16_t Mode,int Input,unsigned int Channel1,unsigned int Channel2)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	4613      	mov	r3, r2
 8001142:	80fb      	strh	r3, [r7, #6]
	motor->htim1 = htim1;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	601a      	str	r2, [r3, #0]
	motor->Mode = Mode;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	88fa      	ldrh	r2, [r7, #6]
 800114e:	821a      	strh	r2, [r3, #16]
	motor->Pwm = abs(Input);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	bfb8      	it	lt
 8001156:	425b      	neglt	r3, r3
 8001158:	b29a      	uxth	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	81da      	strh	r2, [r3, #14]
	motor->Channel1 = Channel1;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	615a      	str	r2, [r3, #20]
	motor->Channel2 = Channel2;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	619a      	str	r2, [r3, #24]
//	motor->Mode = Mode;
	if(Input < 0)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	da59      	bge.n	8001224 <DC_Drive_BTS+0xf0>
	{
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,1000-motor->Pwm);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d108      	bne.n	800118a <DC_Drive_BTS+0x56>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	89db      	ldrh	r3, [r3, #14]
 800117c:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	635a      	str	r2, [r3, #52]	; 0x34
 8001188:	e024      	b.n	80011d4 <DC_Drive_BTS+0xa0>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	2b04      	cmp	r3, #4
 8001190:	d109      	bne.n	80011a6 <DC_Drive_BTS+0x72>
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	89db      	ldrh	r3, [r3, #14]
 8001196:	f5c3 717a 	rsb	r1, r3, #1000	; 0x3e8
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	460b      	mov	r3, r1
 80011a2:	6393      	str	r3, [r2, #56]	; 0x38
 80011a4:	e016      	b.n	80011d4 <DC_Drive_BTS+0xa0>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d109      	bne.n	80011c2 <DC_Drive_BTS+0x8e>
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	89db      	ldrh	r3, [r3, #14]
 80011b2:	f5c3 717a 	rsb	r1, r3, #1000	; 0x3e8
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	460b      	mov	r3, r1
 80011be:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011c0:	e008      	b.n	80011d4 <DC_Drive_BTS+0xa0>
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	89db      	ldrh	r3, [r3, #14]
 80011c6:	f5c3 717a 	rsb	r1, r3, #1000	; 0x3e8
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	460b      	mov	r3, r1
 80011d2:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,1000);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d106      	bne.n	80011ea <DC_Drive_BTS+0xb6>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011e6:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,1000);
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,1000);
	}
}
 80011e8:	e0c8      	b.n	800137c <DC_Drive_BTS+0x248>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,1000);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d106      	bne.n	8001200 <DC_Drive_BTS+0xcc>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fc:	6393      	str	r3, [r2, #56]	; 0x38
 80011fe:	e0bd      	b.n	800137c <DC_Drive_BTS+0x248>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	2b08      	cmp	r3, #8
 8001206:	d106      	bne.n	8001216 <DC_Drive_BTS+0xe2>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001212:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001214:	e0b2      	b.n	800137c <DC_Drive_BTS+0x248>
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001222:	e0ab      	b.n	800137c <DC_Drive_BTS+0x248>
	else if(Input > 0)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	dd59      	ble.n	80012de <DC_Drive_BTS+0x1aa>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,1000);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d106      	bne.n	8001240 <DC_Drive_BTS+0x10c>
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800123c:	635a      	str	r2, [r3, #52]	; 0x34
 800123e:	e01b      	b.n	8001278 <DC_Drive_BTS+0x144>
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	2b04      	cmp	r3, #4
 8001246:	d106      	bne.n	8001256 <DC_Drive_BTS+0x122>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	6393      	str	r3, [r2, #56]	; 0x38
 8001254:	e010      	b.n	8001278 <DC_Drive_BTS+0x144>
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	2b08      	cmp	r3, #8
 800125c:	d106      	bne.n	800126c <DC_Drive_BTS+0x138>
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001268:	63d3      	str	r3, [r2, #60]	; 0x3c
 800126a:	e005      	b.n	8001278 <DC_Drive_BTS+0x144>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,1000-motor->Pwm);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d108      	bne.n	8001292 <DC_Drive_BTS+0x15e>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	89db      	ldrh	r3, [r3, #14]
 8001284:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001290:	e074      	b.n	800137c <DC_Drive_BTS+0x248>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,1000-motor->Pwm);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	2b04      	cmp	r3, #4
 8001298:	d109      	bne.n	80012ae <DC_Drive_BTS+0x17a>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	89db      	ldrh	r3, [r3, #14]
 800129e:	f5c3 717a 	rsb	r1, r3, #1000	; 0x3e8
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	460b      	mov	r3, r1
 80012aa:	6393      	str	r3, [r2, #56]	; 0x38
 80012ac:	e066      	b.n	800137c <DC_Drive_BTS+0x248>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d109      	bne.n	80012ca <DC_Drive_BTS+0x196>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	89db      	ldrh	r3, [r3, #14]
 80012ba:	f5c3 717a 	rsb	r1, r3, #1000	; 0x3e8
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	460b      	mov	r3, r1
 80012c6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80012c8:	e058      	b.n	800137c <DC_Drive_BTS+0x248>
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	89db      	ldrh	r3, [r3, #14]
 80012ce:	f5c3 717a 	rsb	r1, r3, #1000	; 0x3e8
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	460b      	mov	r3, r1
 80012da:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012dc:	e04e      	b.n	800137c <DC_Drive_BTS+0x248>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,1000);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d106      	bne.n	80012f4 <DC_Drive_BTS+0x1c0>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f0:	635a      	str	r2, [r3, #52]	; 0x34
 80012f2:	e01b      	b.n	800132c <DC_Drive_BTS+0x1f8>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d106      	bne.n	800130a <DC_Drive_BTS+0x1d6>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	6393      	str	r3, [r2, #56]	; 0x38
 8001308:	e010      	b.n	800132c <DC_Drive_BTS+0x1f8>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	2b08      	cmp	r3, #8
 8001310:	d106      	bne.n	8001320 <DC_Drive_BTS+0x1ec>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800131e:	e005      	b.n	800132c <DC_Drive_BTS+0x1f8>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,1000);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d106      	bne.n	8001342 <DC_Drive_BTS+0x20e>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800133e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001340:	e01c      	b.n	800137c <DC_Drive_BTS+0x248>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,1000);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	2b04      	cmp	r3, #4
 8001348:	d106      	bne.n	8001358 <DC_Drive_BTS+0x224>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001354:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001356:	e011      	b.n	800137c <DC_Drive_BTS+0x248>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,1000);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	2b08      	cmp	r3, #8
 800135e:	d106      	bne.n	800136e <DC_Drive_BTS+0x23a>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800136c:	e006      	b.n	800137c <DC_Drive_BTS+0x248>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,1000);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001378:	6413      	str	r3, [r2, #64]	; 0x40
}
 800137a:	e7ff      	b.n	800137c <DC_Drive_BTS+0x248>
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
	...

08001388 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <vApplicationGetIdleTaskMemory+0x28>)
 8001398:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800139e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2280      	movs	r2, #128	; 0x80
 80013a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	20000034 	.word	0x20000034
 80013b4:	20000088 	.word	0x20000088

080013b8 <PIDBLDC>:

//-----------------------------------------------------------------------------------------------------------------//
//----------------------------------------------------BEGIN: PID MOTOR---------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------//
void PIDBLDC(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af02      	add	r7, sp, #8
	//Calculate the speed of BLD
	SpeedReadOnly(&ENC_BLDC);
 80013be:	4810      	ldr	r0, [pc, #64]	; (8001400 <PIDBLDC+0x48>)
 80013c0:	f7ff fcbe 	bl	8000d40 <SpeedReadOnly>
	//Calculate PID of BLDC
	Pid_Cal(&PID_BLDC,target_BLDC_Speed,ENC_BLDC.vel_Real);
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <PIDBLDC+0x4c>)
 80013c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <PIDBLDC+0x48>)
 80013cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80013d0:	e9cd 2300 	strd	r2, r3, [sp]
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	480b      	ldr	r0, [pc, #44]	; (8001408 <PIDBLDC+0x50>)
 80013da:	f7ff fb73 	bl	8000ac4 <Pid_Cal>
	//Drive Motor
	BLDC_Drive_RedBoard(&BLDC,&htim2,PID_BLDC.u,TIM_CHANNEL_2);
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <PIDBLDC+0x50>)
 80013e0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fb08 	bl	80009fc <__aeabi_d2iz>
 80013ec:	4602      	mov	r2, r0
 80013ee:	2304      	movs	r3, #4
 80013f0:	4906      	ldr	r1, [pc, #24]	; (800140c <PIDBLDC+0x54>)
 80013f2:	4807      	ldr	r0, [pc, #28]	; (8001410 <PIDBLDC+0x58>)
 80013f4:	f7ff fe20 	bl	8001038 <BLDC_Drive_RedBoard>
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000560 	.word	0x20000560
 8001404:	20000288 	.word	0x20000288
 8001408:	20000398 	.word	0x20000398
 800140c:	200002a0 	.word	0x200002a0
 8001410:	200005f0 	.word	0x200005f0

08001414 <PIDDCSpeed>:

void PIDDCSpeed(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af02      	add	r7, sp, #8
	//Calculate velocity of DC Servo:
	SpeedReadNonReset(&ENC_DC);
 800141a:	4812      	ldr	r0, [pc, #72]	; (8001464 <PIDDCSpeed+0x50>)
 800141c:	f7ff fd1c 	bl	8000e58 <SpeedReadNonReset>
	//Calculate PID of DC speed:
	Pid_Cal(&PID_DC_SPEED,target_DC_SPEED,ENC_DC.vel_Real);
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <PIDDCSpeed+0x54>)
 8001422:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <PIDDCSpeed+0x50>)
 8001428:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800142c:	e9cd 2300 	strd	r2, r3, [sp]
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	480d      	ldr	r0, [pc, #52]	; (800146c <PIDDCSpeed+0x58>)
 8001436:	f7ff fb45 	bl	8000ac4 <Pid_Cal>
	//Drive Motor
	DC_Drive_BTS(&DC,&htim2,motor_Reserve,PID_DC_SPEED.u,TIM_CHANNEL_3,TIM_CHANNEL_4);
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <PIDDCSpeed+0x58>)
 800143c:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f7ff fada 	bl	80009fc <__aeabi_d2iz>
 8001448:	4603      	mov	r3, r0
 800144a:	220c      	movs	r2, #12
 800144c:	9201      	str	r2, [sp, #4]
 800144e:	2208      	movs	r2, #8
 8001450:	9200      	str	r2, [sp, #0]
 8001452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001456:	4906      	ldr	r1, [pc, #24]	; (8001470 <PIDDCSpeed+0x5c>)
 8001458:	4806      	ldr	r0, [pc, #24]	; (8001474 <PIDDCSpeed+0x60>)
 800145a:	f7ff fe6b 	bl	8001134 <DC_Drive_BTS>

}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200005a8 	.word	0x200005a8
 8001468:	20000290 	.word	0x20000290
 800146c:	20000430 	.word	0x20000430
 8001470:	200002a0 	.word	0x200002a0
 8001474:	2000060c 	.word	0x2000060c

08001478 <PIDDCPos>:

void PIDDCPos(){
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af02      	add	r7, sp, #8
	//Calculate the Pos of DC Servo:
	Pid_Cal(&PID_DC_POS,target_DC_POS,CountRead(&ENC_DC,count_ModeDegree));
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <PIDDCPos+0x3c>)
 8001480:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001484:	2102      	movs	r1, #2
 8001486:	480c      	ldr	r0, [pc, #48]	; (80014b8 <PIDDCPos+0x40>)
 8001488:	f7ff fd74 	bl	8000f74 <CountRead>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	e9cd 2300 	strd	r2, r3, [sp]
 8001494:	4622      	mov	r2, r4
 8001496:	462b      	mov	r3, r5
 8001498:	4808      	ldr	r0, [pc, #32]	; (80014bc <PIDDCPos+0x44>)
 800149a:	f7ff fb13 	bl	8000ac4 <Pid_Cal>
	//Control the Speed PID:
	target_DC_SPEED = PID_DC_POS.u;
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <PIDDCPos+0x44>)
 80014a0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80014a4:	4906      	ldr	r1, [pc, #24]	; (80014c0 <PIDDCPos+0x48>)
 80014a6:	e9c1 2300 	strd	r2, r3, [r1]
	PIDDCSpeed();
 80014aa:	f7ff ffb3 	bl	8001414 <PIDDCSpeed>

}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bdb0      	pop	{r4, r5, r7, pc}
 80014b4:	20000298 	.word	0x20000298
 80014b8:	200005a8 	.word	0x200005a8
 80014bc:	200004c8 	.word	0x200004c8
 80014c0:	20000290 	.word	0x20000290

080014c4 <ResetDegree>:

//-----------------------------------------------------------------------------------------------------------------//
//----------------------------------------------------BEGIN: RESET MOTOR-------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------//

void ResetDegree(uint8_t ResetEnable){
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
	if(ResetEnable == 1){
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d105      	bne.n	80014e0 <ResetDegree+0x1c>
		TIM3 -> CNT = 0;
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <ResetDegree+0x28>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
		XungDCX4 = 0;
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <ResetDegree+0x2c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
	}
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40000400 	.word	0x40000400
 80014f0:	20000388 	.word	0x20000388
 80014f4:	00000000 	.word	0x00000000

080014f8 <SetAndResetU2parameter>:

void SetAndResetU2parameter(uint8_t command){
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	if(!command){
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d122      	bne.n	800154e <SetAndResetU2parameter+0x56>
		PID_DC_SPEED.uI_AboveLimit=0;
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <SetAndResetU2parameter+0x90>)
 800150a:	2200      	movs	r2, #0
 800150c:	651a      	str	r2, [r3, #80]	; 0x50
		PID_DC_SPEED.uI_BelowLimit=0;
 800150e:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <SetAndResetU2parameter+0x90>)
 8001510:	2200      	movs	r2, #0
 8001512:	655a      	str	r2, [r3, #84]	; 0x54
		PID_DC_SPEED.u_AboveLimit=0;
 8001514:	491c      	ldr	r1, [pc, #112]	; (8001588 <SetAndResetU2parameter+0x90>)
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
		PID_DC_SPEED.u_BelowLimit=0;
 8001522:	4919      	ldr	r1, [pc, #100]	; (8001588 <SetAndResetU2parameter+0x90>)
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
		ENC_DC.vel_Pre = 0;
 8001530:	4916      	ldr	r1, [pc, #88]	; (800158c <SetAndResetU2parameter+0x94>)
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	f04f 0300 	mov.w	r3, #0
 800153a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		ENC_DC.vel_Real = 0;
 800153e:	4913      	ldr	r1, [pc, #76]	; (800158c <SetAndResetU2parameter+0x94>)
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	e9c1 2308 	strd	r2, r3, [r1, #32]
		PID_DC_SPEED.uI_AboveLimit = DCIntegralAboveLimit;
		PID_DC_SPEED.uI_BelowLimit = DCIntegralBelowLimit;
		PID_DC_SPEED.u_AboveLimit = DCSumAboveLimit;
		PID_DC_SPEED.u_BelowLimit = DCSumBelowLimit;
	}
}
 800154c:	e012      	b.n	8001574 <SetAndResetU2parameter+0x7c>
		PID_DC_SPEED.uI_AboveLimit = DCIntegralAboveLimit;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <SetAndResetU2parameter+0x90>)
 8001550:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001554:	651a      	str	r2, [r3, #80]	; 0x50
		PID_DC_SPEED.uI_BelowLimit = DCIntegralBelowLimit;
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <SetAndResetU2parameter+0x90>)
 8001558:	4a0d      	ldr	r2, [pc, #52]	; (8001590 <SetAndResetU2parameter+0x98>)
 800155a:	655a      	str	r2, [r3, #84]	; 0x54
		PID_DC_SPEED.u_AboveLimit = DCSumAboveLimit;
 800155c:	490a      	ldr	r1, [pc, #40]	; (8001588 <SetAndResetU2parameter+0x90>)
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <SetAndResetU2parameter+0x9c>)
 8001564:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
		PID_DC_SPEED.u_BelowLimit = DCSumBelowLimit;
 8001568:	4907      	ldr	r1, [pc, #28]	; (8001588 <SetAndResetU2parameter+0x90>)
 800156a:	a305      	add	r3, pc, #20	; (adr r3, 8001580 <SetAndResetU2parameter+0x88>)
 800156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001570:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	00000000 	.word	0x00000000
 8001584:	c08f4000 	.word	0xc08f4000
 8001588:	20000430 	.word	0x20000430
 800158c:	200005a8 	.word	0x200005a8
 8001590:	fffffc18 	.word	0xfffffc18
 8001594:	408f4000 	.word	0x408f4000

08001598 <HomeFinding>:
//-----------------------------------------------------------------------------------------------------------------//
//----------------------------------------------------BEGIN: Home Finding------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------//


void HomeFinding(){
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
//  // Reading home sensor if the  wheel at home or not
//  // if at home the wheel won't run and set the initial Degree to 0
//  // if not the wheel will find home
  if(HAL_GPIO_ReadPin(Home_GPIO_Port, Home_Pin)== AtHome){
 800159c:	2110      	movs	r1, #16
 800159e:	4860      	ldr	r0, [pc, #384]	; (8001720 <HomeFinding+0x188>)
 80015a0:	f001 f884 	bl	80026ac <HAL_GPIO_ReadPin>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d123      	bne.n	80015f2 <HomeFinding+0x5a>
	osDelay(1);
 80015aa:	2001      	movs	r0, #1
 80015ac:	f002 fcbe 	bl	8003f2c <osDelay>
	if(HAL_GPIO_ReadPin(Home_GPIO_Port, Home_Pin)== AtHome){
 80015b0:	2110      	movs	r1, #16
 80015b2:	485b      	ldr	r0, [pc, #364]	; (8001720 <HomeFinding+0x188>)
 80015b4:	f001 f87a 	bl	80026ac <HAL_GPIO_ReadPin>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d119      	bne.n	80015f2 <HomeFinding+0x5a>
		HomeStatus = 1;
 80015be:	4b59      	ldr	r3, [pc, #356]	; (8001724 <HomeFinding+0x18c>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
		if((RunStatus == IntialState)||(RunStatus == AccurateFindingState)){
 80015c4:	4b58      	ldr	r3, [pc, #352]	; (8001728 <HomeFinding+0x190>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HomeFinding+0x3c>
 80015cc:	4b56      	ldr	r3, [pc, #344]	; (8001728 <HomeFinding+0x190>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d10e      	bne.n	80015f2 <HomeFinding+0x5a>
			target_DC_POS = CountRead(&ENC_DC,count_ModeDegree);
 80015d4:	2102      	movs	r1, #2
 80015d6:	4855      	ldr	r0, [pc, #340]	; (800172c <HomeFinding+0x194>)
 80015d8:	f7ff fccc 	bl	8000f74 <CountRead>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4953      	ldr	r1, [pc, #332]	; (8001730 <HomeFinding+0x198>)
 80015e2:	e9c1 2300 	strd	r2, r3, [r1]
			RunStatus++;
 80015e6:	4b50      	ldr	r3, [pc, #320]	; (8001728 <HomeFinding+0x190>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4b4e      	ldr	r3, [pc, #312]	; (8001728 <HomeFinding+0x190>)
 80015f0:	701a      	strb	r2, [r3, #0]
	  }
	}

  // At this State the Wheel will find its home at high speed
  // And will reserve when it reach the Degree limits not to break the wires
  if(RunStatus == IntialState){
 80015f2:	4b4d      	ldr	r3, [pc, #308]	; (8001728 <HomeFinding+0x190>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d12c      	bne.n	8001654 <HomeFinding+0xbc>
	if(DCDegree > FindingDegreeAboveLimit){
 80015fa:	4b4e      	ldr	r3, [pc, #312]	; (8001734 <HomeFinding+0x19c>)
 80015fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	4b4c      	ldr	r3, [pc, #304]	; (8001738 <HomeFinding+0x1a0>)
 8001606:	f7ff f9ef 	bl	80009e8 <__aeabi_dcmpgt>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HomeFinding+0x80>
		RotateStatus = DCClockWise;
 8001610:	4b4a      	ldr	r3, [pc, #296]	; (800173c <HomeFinding+0x1a4>)
 8001612:	22ff      	movs	r2, #255	; 0xff
 8001614:	701a      	strb	r2, [r3, #0]
 8001616:	e00d      	b.n	8001634 <HomeFinding+0x9c>
	}else if(DCDegree< FindingDegreeBelowLimit){
 8001618:	4b46      	ldr	r3, [pc, #280]	; (8001734 <HomeFinding+0x19c>)
 800161a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	4b47      	ldr	r3, [pc, #284]	; (8001740 <HomeFinding+0x1a8>)
 8001624:	f7ff f9c2 	bl	80009ac <__aeabi_dcmplt>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <HomeFinding+0x9c>
		RotateStatus = DCCounterClockWise;
 800162e:	4b43      	ldr	r3, [pc, #268]	; (800173c <HomeFinding+0x1a4>)
 8001630:	2201      	movs	r2, #1
 8001632:	701a      	strb	r2, [r3, #0]
	}
	target_DC_SPEED = IntialFindingSpeed*RotateStatus;
 8001634:	4b41      	ldr	r3, [pc, #260]	; (800173c <HomeFinding+0x1a4>)
 8001636:	f993 3000 	ldrsb.w	r3, [r3]
 800163a:	461a      	mov	r2, r3
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe fed5 	bl	80003f4 <__aeabi_i2d>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	493d      	ldr	r1, [pc, #244]	; (8001744 <HomeFinding+0x1ac>)
 8001650:	e9c1 2300 	strd	r2, r3, [r1]
  }

 //At this State the Wheel will stop and Reset to 0 Degree
if((RunStatus == IntialStopAndResetState)||(RunStatus == AccurateStopAndResetState)){
 8001654:	4b34      	ldr	r3, [pc, #208]	; (8001728 <HomeFinding+0x190>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d003      	beq.n	8001664 <HomeFinding+0xcc>
 800165c:	4b32      	ldr	r3, [pc, #200]	; (8001728 <HomeFinding+0x190>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b03      	cmp	r3, #3
 8001662:	d11f      	bne.n	80016a4 <HomeFinding+0x10c>
	osDelay(500);
 8001664:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001668:	f002 fc60 	bl	8003f2c <osDelay>
	SetAndResetU2parameter(0);
 800166c:	2000      	movs	r0, #0
 800166e:	f7ff ff43 	bl	80014f8 <SetAndResetU2parameter>
	ResetDegree(1);
 8001672:	2001      	movs	r0, #1
 8001674:	f7ff ff26 	bl	80014c4 <ResetDegree>
	target_DC_POS = 0;
 8001678:	492d      	ldr	r1, [pc, #180]	; (8001730 <HomeFinding+0x198>)
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	e9c1 2300 	strd	r2, r3, [r1]
	osDelay(10);
 8001686:	200a      	movs	r0, #10
 8001688:	f002 fc50 	bl	8003f2c <osDelay>
	ResetDegree(0);
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff ff19 	bl	80014c4 <ResetDegree>
	SetAndResetU2parameter(1);
 8001692:	2001      	movs	r0, #1
 8001694:	f7ff ff30 	bl	80014f8 <SetAndResetU2parameter>
	RunStatus += 1;
 8001698:	4b23      	ldr	r3, [pc, #140]	; (8001728 <HomeFinding+0x190>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	4b21      	ldr	r3, [pc, #132]	; (8001728 <HomeFinding+0x190>)
 80016a2:	701a      	strb	r2, [r3, #0]
}

//At this State the wheel will run at low speed to find its home
//And also reserve when its reach the degree limits
if ((RunStatus == AccurateFindingState)&&(HAL_GPIO_ReadPin(Home_GPIO_Port, Home_Pin) == NotAtHome)){
 80016a4:	4b20      	ldr	r3, [pc, #128]	; (8001728 <HomeFinding+0x190>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d12f      	bne.n	800170c <HomeFinding+0x174>
 80016ac:	2110      	movs	r1, #16
 80016ae:	481c      	ldr	r0, [pc, #112]	; (8001720 <HomeFinding+0x188>)
 80016b0:	f000 fffc 	bl	80026ac <HAL_GPIO_ReadPin>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d128      	bne.n	800170c <HomeFinding+0x174>
	if(DCDegree < AccurateFindingDegreeBelowLimit){
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HomeFinding+0x19c>)
 80016bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HomeFinding+0x1b0>)
 80016c6:	f7ff f971 	bl	80009ac <__aeabi_dcmplt>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HomeFinding+0x140>
		RotateStatus = DCCounterClockWise;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <HomeFinding+0x1a4>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
 80016d6:	e00d      	b.n	80016f4 <HomeFinding+0x15c>
	}else if(DCDegree > AccurateFindingDegreeAboveLimit){
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <HomeFinding+0x19c>)
 80016da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <HomeFinding+0x1b4>)
 80016e4:	f7ff f980 	bl	80009e8 <__aeabi_dcmpgt>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d002      	beq.n	80016f4 <HomeFinding+0x15c>
		RotateStatus = DCClockWise;
 80016ee:	4b13      	ldr	r3, [pc, #76]	; (800173c <HomeFinding+0x1a4>)
 80016f0:	22ff      	movs	r2, #255	; 0xff
 80016f2:	701a      	strb	r2, [r3, #0]
	}
	target_DC_SPEED = AccurateFindingSpeed*RotateStatus;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <HomeFinding+0x1a4>)
 80016f6:	f993 3000 	ldrsb.w	r3, [r3]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fe79 	bl	80003f4 <__aeabi_i2d>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	490f      	ldr	r1, [pc, #60]	; (8001744 <HomeFinding+0x1ac>)
 8001708:	e9c1 2300 	strd	r2, r3, [r1]
	}
//End Home Finding
if (RunStatus == EndState){
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HomeFinding+0x190>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b04      	cmp	r3, #4
 8001712:	d102      	bne.n	800171a <HomeFinding+0x182>
	HomeFound = 1;
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HomeFinding+0x1b8>)
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
}
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40010c00 	.word	0x40010c00
 8001724:	20000384 	.word	0x20000384
 8001728:	20000385 	.word	0x20000385
 800172c:	200005a8 	.word	0x200005a8
 8001730:	20000298 	.word	0x20000298
 8001734:	20000390 	.word	0x20000390
 8001738:	40668000 	.word	0x40668000
 800173c:	20000000 	.word	0x20000000
 8001740:	c0668000 	.word	0xc0668000
 8001744:	20000290 	.word	0x20000290
 8001748:	c0240000 	.word	0xc0240000
 800174c:	40240000 	.word	0x40240000
 8001750:	20000386 	.word	0x20000386
 8001754:	00000000 	.word	0x00000000

08001758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001758:	b5b0      	push	{r4, r5, r7, lr}
 800175a:	b0a6      	sub	sp, #152	; 0x98
 800175c:	af10      	add	r7, sp, #64	; 0x40

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800175e:	f000 fd0f 	bl	8002180 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001762:	f000 f931 	bl	80019c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001766:	f000 fa8b 	bl	8001c80 <MX_GPIO_Init>
  MX_TIM2_Init();
 800176a:	f000 f973 	bl	8001a54 <MX_TIM2_Init>
  MX_TIM3_Init();
 800176e:	f000 f9df 	bl	8001b30 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001772:	f000 fa31 	bl	8001bd8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8001776:	2104      	movs	r1, #4
 8001778:	487f      	ldr	r0, [pc, #508]	; (8001978 <main+0x220>)
 800177a:	f001 fd0f 	bl	800319c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 800177e:	2108      	movs	r1, #8
 8001780:	487d      	ldr	r0, [pc, #500]	; (8001978 <main+0x220>)
 8001782:	f001 fd0b 	bl	800319c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8001786:	210c      	movs	r1, #12
 8001788:	487b      	ldr	r0, [pc, #492]	; (8001978 <main+0x220>)
 800178a:	f001 fd07 	bl	800319c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800178e:	213c      	movs	r1, #60	; 0x3c
 8001790:	487a      	ldr	r0, [pc, #488]	; (800197c <main+0x224>)
 8001792:	f001 fe47 	bl	8003424 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001796:	213c      	movs	r1, #60	; 0x3c
 8001798:	4879      	ldr	r0, [pc, #484]	; (8001980 <main+0x228>)
 800179a:	f001 fe43 	bl	8003424 <HAL_TIM_Encoder_Start_IT>
//  HAL_TIM_Base_Start_IT(&htim1);

  //Set intial Speed of both Motor as 0 RPM

  EncoderSetting(&ENC_BLDC,&htim4,_BLDCEncoderPerRound*2.5,BLDCDeltaT);
 800179e:	a370      	add	r3, pc, #448	; (adr r3, 8001960 <main+0x208>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	e9cd 2300 	strd	r2, r3, [sp]
 80017a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ac:	4973      	ldr	r1, [pc, #460]	; (800197c <main+0x224>)
 80017ae:	4875      	ldr	r0, [pc, #468]	; (8001984 <main+0x22c>)
 80017b0:	f7ff faae 	bl	8000d10 <EncoderSetting>
  EncoderSetting(&ENC_DC,&htim3,_DCEncoderPerRound,DCDeltaT);
 80017b4:	a36a      	add	r3, pc, #424	; (adr r3, 8001960 <main+0x208>)
 80017b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ba:	e9cd 2300 	strd	r2, r3, [sp]
 80017be:	4a72      	ldr	r2, [pc, #456]	; (8001988 <main+0x230>)
 80017c0:	496f      	ldr	r1, [pc, #444]	; (8001980 <main+0x228>)
 80017c2:	4872      	ldr	r0, [pc, #456]	; (800198c <main+0x234>)
 80017c4:	f7ff faa4 	bl	8000d10 <EncoderSetting>

  Pid_SetParam(&PID_BLDC,BLDCProportion,BLDCIntegral,BLDCDerivative,BLDCAlpha,BLDCDeltaT,BLDCIntegralAboveLimit,BLDCIntegralBelowLimit,BLDCSumAboveLimit,BLDCSumBelowLimit);
 80017c8:	a367      	add	r3, pc, #412	; (adr r3, 8001968 <main+0x210>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	4b6e      	ldr	r3, [pc, #440]	; (8001990 <main+0x238>)
 80017d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80017dc:	a362      	add	r3, pc, #392	; (adr r3, 8001968 <main+0x210>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	4b69      	ldr	r3, [pc, #420]	; (8001990 <main+0x238>)
 80017ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80017f0:	a35b      	add	r3, pc, #364	; (adr r3, 8001960 <main+0x208>)
 80017f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	4b5f      	ldr	r3, [pc, #380]	; (8001994 <main+0x23c>)
 8001818:	e9cd 2300 	strd	r2, r3, [sp]
 800181c:	a354      	add	r3, pc, #336	; (adr r3, 8001970 <main+0x218>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	485d      	ldr	r0, [pc, #372]	; (8001998 <main+0x240>)
 8001824:	f7ff f912 	bl	8000a4c <Pid_SetParam>
  Pid_SetParam(&PID_DC_SPEED,DCProportion,DCIntegral,DCDerivative,DCAlpha,DCDeltaT,DCIntegralAboveLimit,DCIntegralBelowLimit,DCSumAboveLimit,DCSumBelowLimit);
 8001828:	a34f      	add	r3, pc, #316	; (adr r3, 8001968 <main+0x210>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	4b56      	ldr	r3, [pc, #344]	; (8001990 <main+0x238>)
 8001838:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800183c:	a34a      	add	r3, pc, #296	; (adr r3, 8001968 <main+0x210>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	4b51      	ldr	r3, [pc, #324]	; (8001990 <main+0x238>)
 800184c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001850:	a343      	add	r3, pc, #268	; (adr r3, 8001960 <main+0x208>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	4b49      	ldr	r3, [pc, #292]	; (800199c <main+0x244>)
 8001878:	e9cd 2300 	strd	r2, r3, [sp]
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <main+0x248>)
 8001882:	4848      	ldr	r0, [pc, #288]	; (80019a4 <main+0x24c>)
 8001884:	f7ff f8e2 	bl	8000a4c <Pid_SetParam>
  Pid_SetParam(&PID_DC_POS,DCProportionPOS,DCIntegralPOS,DCDerivativePOS,DCAlphaPOS,DCDeltaTPOS,DCIntegralAboveLimitPOS,DCIntegralBelowLimitPOS,DCSumAboveLimitPOS,DCSumBelowLimitPOS);
 8001888:	a337      	add	r3, pc, #220	; (adr r3, 8001968 <main+0x210>)
 800188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	4b3e      	ldr	r3, [pc, #248]	; (8001990 <main+0x238>)
 8001898:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800189c:	a332      	add	r3, pc, #200	; (adr r3, 8001968 <main+0x210>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b39      	ldr	r3, [pc, #228]	; (8001990 <main+0x238>)
 80018ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80018b0:	a32b      	add	r3, pc, #172	; (adr r3, 8001960 <main+0x208>)
 80018b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	e9cd 2300 	strd	r2, r3, [sp]
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <main+0x250>)
 80018e4:	4831      	ldr	r0, [pc, #196]	; (80019ac <main+0x254>)
 80018e6:	f7ff f8b1 	bl	8000a4c <Pid_SetParam>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of CalPIDDC */
  osThreadDef(CalPIDDC, StartCalPIDDC, osPriorityAboveNormal, 0, 128);
 80018ea:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <main+0x258>)
 80018ec:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80018f0:	461d      	mov	r5, r3
 80018f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CalPIDDCHandle = osThreadCreate(osThread(CalPIDDC), NULL);
 80018fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f002 fac5 	bl	8003e94 <osThreadCreate>
 800190a:	4603      	mov	r3, r0
 800190c:	4a29      	ldr	r2, [pc, #164]	; (80019b4 <main+0x25c>)
 800190e:	6013      	str	r3, [r2, #0]

  /* definition and creation of CalPIDBLDC */
  osThreadDef(CalPIDBLDC, StartCalPIDBLDC, osPriorityBelowNormal, 0, 128);
 8001910:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <main+0x260>)
 8001912:	f107 0420 	add.w	r4, r7, #32
 8001916:	461d      	mov	r5, r3
 8001918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800191a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001920:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CalPIDBLDCHandle = osThreadCreate(osThread(CalPIDBLDC), NULL);
 8001924:	f107 0320 	add.w	r3, r7, #32
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f002 fab2 	bl	8003e94 <osThreadCreate>
 8001930:	4603      	mov	r3, r0
 8001932:	4a22      	ldr	r2, [pc, #136]	; (80019bc <main+0x264>)
 8001934:	6013      	str	r3, [r2, #0]

  /* definition and creation of LogicControl */
  osThreadDef(LogicControl, StartLogicControl, osPriorityNormal, 0, 128);
 8001936:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <main+0x268>)
 8001938:	1d3c      	adds	r4, r7, #4
 800193a:	461d      	mov	r5, r3
 800193c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800193e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001940:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001944:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LogicControlHandle = osThreadCreate(osThread(LogicControl), NULL);
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f002 faa1 	bl	8003e94 <osThreadCreate>
 8001952:	4603      	mov	r3, r0
 8001954:	4a1b      	ldr	r2, [pc, #108]	; (80019c4 <main+0x26c>)
 8001956:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001958:	f002 fa95 	bl	8003e86 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800195c:	e7fe      	b.n	800195c <main+0x204>
 800195e:	bf00      	nop
 8001960:	d2f1a9fc 	.word	0xd2f1a9fc
 8001964:	3f50624d 	.word	0x3f50624d
 8001968:	00000000 	.word	0x00000000
 800196c:	c08f4000 	.word	0xc08f4000
 8001970:	9999999a 	.word	0x9999999a
 8001974:	3fc99999 	.word	0x3fc99999
 8001978:	200002a0 	.word	0x200002a0
 800197c:	20000330 	.word	0x20000330
 8001980:	200002e8 	.word	0x200002e8
 8001984:	20000560 	.word	0x20000560
 8001988:	000109a0 	.word	0x000109a0
 800198c:	200005a8 	.word	0x200005a8
 8001990:	408f4000 	.word	0x408f4000
 8001994:	40240000 	.word	0x40240000
 8001998:	20000398 	.word	0x20000398
 800199c:	407f4000 	.word	0x407f4000
 80019a0:	40340000 	.word	0x40340000
 80019a4:	20000430 	.word	0x20000430
 80019a8:	40140000 	.word	0x40140000
 80019ac:	200004c8 	.word	0x200004c8
 80019b0:	080052a8 	.word	0x080052a8
 80019b4:	20000378 	.word	0x20000378
 80019b8:	080052c4 	.word	0x080052c4
 80019bc:	2000037c 	.word	0x2000037c
 80019c0:	080052e0 	.word	0x080052e0
 80019c4:	20000380 	.word	0x20000380

080019c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b090      	sub	sp, #64	; 0x40
 80019cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ce:	f107 0318 	add.w	r3, r7, #24
 80019d2:	2228      	movs	r2, #40	; 0x28
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 fc3e 	bl	8005258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019ea:	2301      	movs	r3, #1
 80019ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019f4:	2300      	movs	r3, #0
 80019f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019f8:	2301      	movs	r3, #1
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019fc:	2302      	movs	r3, #2
 80019fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a06:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0c:	f107 0318 	add.w	r3, r7, #24
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fe9d 	bl	8002750 <HAL_RCC_OscConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a1c:	f000 f9f6 	bl	8001e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a20:	230f      	movs	r3, #15
 8001a22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a24:	2302      	movs	r3, #2
 8001a26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	2102      	movs	r1, #2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 f90a 	bl	8002c54 <HAL_RCC_ClockConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a46:	f000 f9e1 	bl	8001e0c <Error_Handler>
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	3740      	adds	r7, #64	; 0x40
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5a:	f107 0320 	add.w	r3, r7, #32
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]
 8001a72:	615a      	str	r2, [r3, #20]
 8001a74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a76:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <MX_TIM2_Init+0xd8>)
 8001a78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7-1;
 8001a7e:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <MX_TIM2_Init+0xd8>)
 8001a80:	2206      	movs	r2, #6
 8001a82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a84:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <MX_TIM2_Init+0xd8>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001a8a:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <MX_TIM2_Init+0xd8>)
 8001a8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a92:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <MX_TIM2_Init+0xd8>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a98:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <MX_TIM2_Init+0xd8>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a9e:	4823      	ldr	r0, [pc, #140]	; (8001b2c <MX_TIM2_Init+0xd8>)
 8001aa0:	f001 fb2c 	bl	80030fc <HAL_TIM_PWM_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001aaa:	f000 f9af 	bl	8001e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ab6:	f107 0320 	add.w	r3, r7, #32
 8001aba:	4619      	mov	r1, r3
 8001abc:	481b      	ldr	r0, [pc, #108]	; (8001b2c <MX_TIM2_Init+0xd8>)
 8001abe:	f002 f95b 	bl	8003d78 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001ac8:	f000 f9a0 	bl	8001e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001acc:	2360      	movs	r3, #96	; 0x60
 8001ace:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	2204      	movs	r2, #4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4812      	ldr	r0, [pc, #72]	; (8001b2c <MX_TIM2_Init+0xd8>)
 8001ae4:	f001 fe54 	bl	8003790 <HAL_TIM_PWM_ConfigChannel>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001aee:	f000 f98d 	bl	8001e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	2208      	movs	r2, #8
 8001af6:	4619      	mov	r1, r3
 8001af8:	480c      	ldr	r0, [pc, #48]	; (8001b2c <MX_TIM2_Init+0xd8>)
 8001afa:	f001 fe49 	bl	8003790 <HAL_TIM_PWM_ConfigChannel>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b04:	f000 f982 	bl	8001e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4807      	ldr	r0, [pc, #28]	; (8001b2c <MX_TIM2_Init+0xd8>)
 8001b10:	f001 fe3e 	bl	8003790 <HAL_TIM_PWM_ConfigChannel>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001b1a:	f000 f977 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b1e:	4803      	ldr	r0, [pc, #12]	; (8001b2c <MX_TIM2_Init+0xd8>)
 8001b20:	f000 fa3a 	bl	8001f98 <HAL_TIM_MspPostInit>

}
 8001b24:	bf00      	nop
 8001b26:	3728      	adds	r7, #40	; 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200002a0 	.word	0x200002a0

08001b30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08c      	sub	sp, #48	; 0x30
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	2224      	movs	r2, #36	; 0x24
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f003 fb8a 	bl	8005258 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b4c:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <MX_TIM3_Init+0xa0>)
 8001b4e:	4a21      	ldr	r2, [pc, #132]	; (8001bd4 <MX_TIM3_Init+0xa4>)
 8001b50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b52:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <MX_TIM3_Init+0xa0>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <MX_TIM3_Init+0xa0>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <MX_TIM3_Init+0xa0>)
 8001b60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b66:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <MX_TIM3_Init+0xa0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <MX_TIM3_Init+0xa0>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b72:	2303      	movs	r3, #3
 8001b74:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <MX_TIM3_Init+0xa0>)
 8001b9e:	f001 fb9f 	bl	80032e0 <HAL_TIM_Encoder_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ba8:	f000 f930 	bl	8001e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <MX_TIM3_Init+0xa0>)
 8001bba:	f002 f8dd 	bl	8003d78 <HAL_TIMEx_MasterConfigSynchronization>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001bc4:	f000 f922 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	3730      	adds	r7, #48	; 0x30
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200002e8 	.word	0x200002e8
 8001bd4:	40000400 	.word	0x40000400

08001bd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08c      	sub	sp, #48	; 0x30
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	2224      	movs	r2, #36	; 0x24
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f003 fb36 	bl	8005258 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bf4:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <MX_TIM4_Init+0xa0>)
 8001bf6:	4a21      	ldr	r2, [pc, #132]	; (8001c7c <MX_TIM4_Init+0xa4>)
 8001bf8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <MX_TIM4_Init+0xa0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <MX_TIM4_Init+0xa0>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c06:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <MX_TIM4_Init+0xa0>)
 8001c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <MX_TIM4_Init+0xa0>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c14:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <MX_TIM4_Init+0xa0>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c22:	2301      	movs	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c32:	2301      	movs	r3, #1
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	4619      	mov	r1, r3
 8001c44:	480c      	ldr	r0, [pc, #48]	; (8001c78 <MX_TIM4_Init+0xa0>)
 8001c46:	f001 fb4b 	bl	80032e0 <HAL_TIM_Encoder_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001c50:	f000 f8dc 	bl	8001e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c54:	2300      	movs	r3, #0
 8001c56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_TIM4_Init+0xa0>)
 8001c62:	f002 f889 	bl	8003d78 <HAL_TIMEx_MasterConfigSynchronization>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001c6c:	f000 f8ce 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c70:	bf00      	nop
 8001c72:	3730      	adds	r7, #48	; 0x30
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000330 	.word	0x20000330
 8001c7c:	40000800 	.word	0x40000800

08001c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c86:	f107 0310 	add.w	r3, r7, #16
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c94:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <MX_GPIO_Init+0xb4>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a26      	ldr	r2, [pc, #152]	; (8001d34 <MX_GPIO_Init+0xb4>)
 8001c9a:	f043 0320 	orr.w	r3, r3, #32
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <MX_GPIO_Init+0xb4>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0320 	and.w	r3, r3, #32
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cac:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <MX_GPIO_Init+0xb4>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	4a20      	ldr	r2, [pc, #128]	; (8001d34 <MX_GPIO_Init+0xb4>)
 8001cb2:	f043 0304 	orr.w	r3, r3, #4
 8001cb6:	6193      	str	r3, [r2, #24]
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <MX_GPIO_Init+0xb4>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <MX_GPIO_Init+0xb4>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	4a1a      	ldr	r2, [pc, #104]	; (8001d34 <MX_GPIO_Init+0xb4>)
 8001cca:	f043 0308 	orr.w	r3, r3, #8
 8001cce:	6193      	str	r3, [r2, #24]
 8001cd0:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <MX_GPIO_Init+0xb4>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DirBLDC_GPIO_Port, DirBLDC_Pin, GPIO_PIN_RESET);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2101      	movs	r1, #1
 8001ce0:	4815      	ldr	r0, [pc, #84]	; (8001d38 <MX_GPIO_Init+0xb8>)
 8001ce2:	f000 fcfa 	bl	80026da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DirBLDC_Pin */
  GPIO_InitStruct.Pin = DirBLDC_Pin;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DirBLDC_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 0310 	add.w	r3, r7, #16
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480e      	ldr	r0, [pc, #56]	; (8001d38 <MX_GPIO_Init+0xb8>)
 8001cfe:	f000 fb51 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Home_Pin */
  GPIO_InitStruct.Pin = Home_Pin;
 8001d02:	2310      	movs	r3, #16
 8001d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <MX_GPIO_Init+0xbc>)
 8001d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Home_GPIO_Port, &GPIO_InitStruct);
 8001d0e:	f107 0310 	add.w	r3, r7, #16
 8001d12:	4619      	mov	r1, r3
 8001d14:	480a      	ldr	r0, [pc, #40]	; (8001d40 <MX_GPIO_Init+0xc0>)
 8001d16:	f000 fb45 	bl	80023a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	200a      	movs	r0, #10
 8001d20:	f000 fb15 	bl	800234e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d24:	200a      	movs	r0, #10
 8001d26:	f000 fb2e 	bl	8002386 <HAL_NVIC_EnableIRQ>

}
 8001d2a:	bf00      	nop
 8001d2c:	3720      	adds	r7, #32
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40010800 	.word	0x40010800
 8001d3c:	10110000 	.word	0x10110000
 8001d40:	40010c00 	.word	0x40010c00

08001d44 <StartCalPIDDC>:
  * @retval None
  */

/* USER CODE END Header_StartCalPIDDC */
void StartCalPIDDC(void const * argument)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  for(;;)
  {


//	if((HomeStatus)&&(RunStatus != AccurateFindingState)){
	PIDDCPos();
 8001d4c:	f7ff fb94 	bl	8001478 <PIDDCPos>
//	}
//	else{
//	PIDDCSpeed();
//	}

	osDelay(1);
 8001d50:	2001      	movs	r0, #1
 8001d52:	f002 f8eb 	bl	8003f2c <osDelay>
	PIDDCPos();
 8001d56:	e7f9      	b.n	8001d4c <StartCalPIDDC+0x8>

08001d58 <StartCalPIDBLDC>:
* @retval None
*/
int AntiProtection;
/* USER CODE END Header_StartCalPIDBLDC */
void StartCalPIDBLDC(void const * argument)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCalPIDBLDC */
  /* Infinite loop */
  for(;;)
  {
	if(AntiProtection == 1){
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <StartCalPIDBLDC+0x60>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d121      	bne.n	8001dac <StartCalPIDBLDC+0x54>
		PID_BLDC.uI = 0;
 8001d68:	4914      	ldr	r1, [pc, #80]	; (8001dbc <StartCalPIDBLDC+0x64>)
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		PID_BLDC.uI_Pre = 0;
 8001d76:	4911      	ldr	r1, [pc, #68]	; (8001dbc <StartCalPIDBLDC+0x64>)
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		PID_BLDC.u = 0;
 8001d84:	490d      	ldr	r1, [pc, #52]	; (8001dbc <StartCalPIDBLDC+0x64>)
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
		BLDC_Drive_RedBoard(&BLDC,&htim2,0,TIM_CHANNEL_2);
 8001d92:	2304      	movs	r3, #4
 8001d94:	2200      	movs	r2, #0
 8001d96:	490a      	ldr	r1, [pc, #40]	; (8001dc0 <StartCalPIDBLDC+0x68>)
 8001d98:	480a      	ldr	r0, [pc, #40]	; (8001dc4 <StartCalPIDBLDC+0x6c>)
 8001d9a:	f7ff f94d 	bl	8001038 <BLDC_Drive_RedBoard>
		osDelay(100);
 8001d9e:	2064      	movs	r0, #100	; 0x64
 8001da0:	f002 f8c4 	bl	8003f2c <osDelay>
		AntiProtection = 0;
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <StartCalPIDBLDC+0x60>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	e001      	b.n	8001db0 <StartCalPIDBLDC+0x58>
	}else{
		PIDBLDC();
 8001dac:	f7ff fb04 	bl	80013b8 <PIDBLDC>
	}
	osDelay(1);
 8001db0:	2001      	movs	r0, #1
 8001db2:	f002 f8bb 	bl	8003f2c <osDelay>
	if(AntiProtection == 1){
 8001db6:	e7d3      	b.n	8001d60 <StartCalPIDBLDC+0x8>
 8001db8:	20000628 	.word	0x20000628
 8001dbc:	20000398 	.word	0x20000398
 8001dc0:	200002a0 	.word	0x200002a0
 8001dc4:	200005f0 	.word	0x200005f0

08001dc8 <StartLogicControl>:
int TestDegree[] = {90,180,50,0,60,0,-90,10};
int TestSpeed[] = {100,0,120,200,100,200,100,0};

/* USER CODE END Header_StartLogicControl */
void StartLogicControl(void const * argument)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLogicControl */
  /* Infinite loop */
  for(;;)
  {
	if(HomeFound == 0)
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <StartLogicControl+0x1c>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <StartLogicControl+0x14>
	{
		HomeFinding();
 8001dd8:	f7ff fbde 	bl	8001598 <HomeFinding>
	}

    osDelay(1);
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f002 f8a5 	bl	8003f2c <osDelay>
	if(HomeFound == 0)
 8001de2:	e7f5      	b.n	8001dd0 <StartLogicControl+0x8>
 8001de4:	20000386 	.word	0x20000386

08001de8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d101      	bne.n	8001dfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dfa:	f000 f9d7 	bl	80021ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40012c00 	.word	0x40012c00

08001e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e10:	b672      	cpsid	i
}
 8001e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <Error_Handler+0x8>
	...

08001e18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_MspInit+0x68>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <HAL_MspInit+0x68>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6193      	str	r3, [r2, #24]
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_MspInit+0x68>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_MspInit+0x68>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <HAL_MspInit+0x68>)
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e40:	61d3      	str	r3, [r2, #28]
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_MspInit+0x68>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	210f      	movs	r1, #15
 8001e52:	f06f 0001 	mvn.w	r0, #1
 8001e56:	f000 fa7a 	bl	800234e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_MspInit+0x6c>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <HAL_MspInit+0x6c>)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40010000 	.word	0x40010000

08001e88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e98:	d10b      	bne.n	8001eb2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_TIM_PWM_MspInit+0x34>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <HAL_TIM_PWM_MspInit+0x34>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	61d3      	str	r3, [r2, #28]
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_TIM_PWM_MspInit+0x34>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	40021000 	.word	0x40021000

08001ec0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 0318 	add.w	r3, r7, #24
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a2a      	ldr	r2, [pc, #168]	; (8001f84 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d124      	bne.n	8001f2a <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ee0:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	4a28      	ldr	r2, [pc, #160]	; (8001f88 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001ee6:	f043 0302 	orr.w	r3, r3, #2
 8001eea:	61d3      	str	r3, [r2, #28]
 8001eec:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef8:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	4a22      	ldr	r2, [pc, #136]	; (8001f88 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	6193      	str	r3, [r2, #24]
 8001f04:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f10:	23c0      	movs	r3, #192	; 0xc0
 8001f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1c:	f107 0318 	add.w	r3, r7, #24
 8001f20:	4619      	mov	r1, r3
 8001f22:	481a      	ldr	r0, [pc, #104]	; (8001f8c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f24:	f000 fa3e 	bl	80023a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f28:	e028      	b.n	8001f7c <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM4)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a18      	ldr	r2, [pc, #96]	; (8001f90 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d123      	bne.n	8001f7c <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	4a13      	ldr	r2, [pc, #76]	; (8001f88 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f3a:	f043 0304 	orr.w	r3, r3, #4
 8001f3e:	61d3      	str	r3, [r2, #28]
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4a0d      	ldr	r2, [pc, #52]	; (8001f88 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f52:	f043 0308 	orr.w	r3, r3, #8
 8001f56:	6193      	str	r3, [r2, #24]
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f64:	23c0      	movs	r3, #192	; 0xc0
 8001f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f70:	f107 0318 	add.w	r3, r7, #24
 8001f74:	4619      	mov	r1, r3
 8001f76:	4807      	ldr	r0, [pc, #28]	; (8001f94 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001f78:	f000 fa14 	bl	80023a4 <HAL_GPIO_Init>
}
 8001f7c:	bf00      	nop
 8001f7e:	3728      	adds	r7, #40	; 0x28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40000400 	.word	0x40000400
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40010800 	.word	0x40010800
 8001f90:	40000800 	.word	0x40000800
 8001f94:	40010c00 	.word	0x40010c00

08001f98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb6:	d117      	bne.n	8001fe8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <HAL_TIM_MspPostInit+0x58>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <HAL_TIM_MspPostInit+0x58>)
 8001fbe:	f043 0304 	orr.w	r3, r3, #4
 8001fc2:	6193      	str	r3, [r2, #24]
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <HAL_TIM_MspPostInit+0x58>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001fd0:	230e      	movs	r3, #14
 8001fd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fdc:	f107 0310 	add.w	r3, r7, #16
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4804      	ldr	r0, [pc, #16]	; (8001ff4 <HAL_TIM_MspPostInit+0x5c>)
 8001fe4:	f000 f9de 	bl	80023a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001fe8:	bf00      	nop
 8001fea:	3720      	adds	r7, #32
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40010800 	.word	0x40010800

08001ff8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08c      	sub	sp, #48	; 0x30
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800200e:	4b2e      	ldr	r3, [pc, #184]	; (80020c8 <HAL_InitTick+0xd0>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	4a2d      	ldr	r2, [pc, #180]	; (80020c8 <HAL_InitTick+0xd0>)
 8002014:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002018:	6193      	str	r3, [r2, #24]
 800201a:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <HAL_InitTick+0xd0>)
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002026:	f107 020c 	add.w	r2, r7, #12
 800202a:	f107 0310 	add.w	r3, r7, #16
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f000 ff6b 	bl	8002f0c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002036:	f000 ff55 	bl	8002ee4 <HAL_RCC_GetPCLK2Freq>
 800203a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800203c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203e:	4a23      	ldr	r2, [pc, #140]	; (80020cc <HAL_InitTick+0xd4>)
 8002040:	fba2 2303 	umull	r2, r3, r2, r3
 8002044:	0c9b      	lsrs	r3, r3, #18
 8002046:	3b01      	subs	r3, #1
 8002048:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800204a:	4b21      	ldr	r3, [pc, #132]	; (80020d0 <HAL_InitTick+0xd8>)
 800204c:	4a21      	ldr	r2, [pc, #132]	; (80020d4 <HAL_InitTick+0xdc>)
 800204e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002050:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <HAL_InitTick+0xd8>)
 8002052:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002056:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002058:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <HAL_InitTick+0xd8>)
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <HAL_InitTick+0xd8>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002064:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <HAL_InitTick+0xd8>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206a:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_InitTick+0xd8>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002070:	4817      	ldr	r0, [pc, #92]	; (80020d0 <HAL_InitTick+0xd8>)
 8002072:	f000 ff99 	bl	8002fa8 <HAL_TIM_Base_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800207c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002080:	2b00      	cmp	r3, #0
 8002082:	d11b      	bne.n	80020bc <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002084:	4812      	ldr	r0, [pc, #72]	; (80020d0 <HAL_InitTick+0xd8>)
 8002086:	f000 ffe7 	bl	8003058 <HAL_TIM_Base_Start_IT>
 800208a:	4603      	mov	r3, r0
 800208c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002090:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002094:	2b00      	cmp	r3, #0
 8002096:	d111      	bne.n	80020bc <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002098:	2019      	movs	r0, #25
 800209a:	f000 f974 	bl	8002386 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b0f      	cmp	r3, #15
 80020a2:	d808      	bhi.n	80020b6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80020a4:	2200      	movs	r2, #0
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	2019      	movs	r0, #25
 80020aa:	f000 f950 	bl	800234e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <HAL_InitTick+0xe0>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	e002      	b.n	80020bc <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80020bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3730      	adds	r7, #48	; 0x30
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000
 80020cc:	431bde83 	.word	0x431bde83
 80020d0:	2000062c 	.word	0x2000062c
 80020d4:	40012c00 	.word	0x40012c00
 80020d8:	20000008 	.word	0x20000008

080020dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <NMI_Handler+0x4>

080020e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e6:	e7fe      	b.n	80020e6 <HardFault_Handler+0x4>

080020e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <MemManage_Handler+0x4>

080020ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f2:	e7fe      	b.n	80020f2 <BusFault_Handler+0x4>

080020f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <UsageFault_Handler+0x4>

080020fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Home_Pin);
 800210a:	2010      	movs	r0, #16
 800210c:	f000 fafe 	bl	800270c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}

08002114 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <TIM1_UP_IRQHandler+0x10>)
 800211a:	f001 fa31 	bl	8003580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	2000062c 	.word	0x2000062c

08002128 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002134:	f7ff fff8 	bl	8002128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002138:	480b      	ldr	r0, [pc, #44]	; (8002168 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800213a:	490c      	ldr	r1, [pc, #48]	; (800216c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800213c:	4a0c      	ldr	r2, [pc, #48]	; (8002170 <LoopFillZerobss+0x16>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002140:	e002      	b.n	8002148 <LoopCopyDataInit>

08002142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002146:	3304      	adds	r3, #4

08002148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800214a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800214c:	d3f9      	bcc.n	8002142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214e:	4a09      	ldr	r2, [pc, #36]	; (8002174 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002150:	4c09      	ldr	r4, [pc, #36]	; (8002178 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002154:	e001      	b.n	800215a <LoopFillZerobss>

08002156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002158:	3204      	adds	r2, #4

0800215a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800215a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800215c:	d3fb      	bcc.n	8002156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800215e:	f003 f857 	bl	8005210 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002162:	f7ff faf9 	bl	8001758 <main>
  bx lr
 8002166:	4770      	bx	lr
  ldr r0, =_sdata
 8002168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800216c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002170:	08005338 	.word	0x08005338
  ldr r2, =_sbss
 8002174:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002178:	200013c4 	.word	0x200013c4

0800217c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800217c:	e7fe      	b.n	800217c <ADC1_2_IRQHandler>
	...

08002180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <HAL_Init+0x28>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a07      	ldr	r2, [pc, #28]	; (80021a8 <HAL_Init+0x28>)
 800218a:	f043 0310 	orr.w	r3, r3, #16
 800218e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002190:	2003      	movs	r0, #3
 8002192:	f000 f8d1 	bl	8002338 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002196:	200f      	movs	r0, #15
 8002198:	f7ff ff2e 	bl	8001ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800219c:	f7ff fe3c 	bl	8001e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40022000 	.word	0x40022000

080021ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_IncTick+0x1c>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_IncTick+0x20>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	4a03      	ldr	r2, [pc, #12]	; (80021cc <HAL_IncTick+0x20>)
 80021be:	6013      	str	r3, [r2, #0]
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	2000000c 	.word	0x2000000c
 80021cc:	20000674 	.word	0x20000674

080021d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return uwTick;
 80021d4:	4b02      	ldr	r3, [pc, #8]	; (80021e0 <HAL_GetTick+0x10>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	20000674 	.word	0x20000674

080021e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002200:	4013      	ands	r3, r2
 8002202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800220c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002216:	4a04      	ldr	r2, [pc, #16]	; (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	60d3      	str	r3, [r2, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <__NVIC_GetPriorityGrouping+0x18>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	f003 0307 	and.w	r3, r3, #7
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	2b00      	cmp	r3, #0
 8002258:	db0b      	blt.n	8002272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	f003 021f 	and.w	r2, r3, #31
 8002260:	4906      	ldr	r1, [pc, #24]	; (800227c <__NVIC_EnableIRQ+0x34>)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	2001      	movs	r0, #1
 800226a:	fa00 f202 	lsl.w	r2, r0, r2
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	e000e100 	.word	0xe000e100

08002280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	6039      	str	r1, [r7, #0]
 800228a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	2b00      	cmp	r3, #0
 8002292:	db0a      	blt.n	80022aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	490c      	ldr	r1, [pc, #48]	; (80022cc <__NVIC_SetPriority+0x4c>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	440b      	add	r3, r1
 80022a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a8:	e00a      	b.n	80022c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4908      	ldr	r1, [pc, #32]	; (80022d0 <__NVIC_SetPriority+0x50>)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	3b04      	subs	r3, #4
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	440b      	add	r3, r1
 80022be:	761a      	strb	r2, [r3, #24]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000e100 	.word	0xe000e100
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	; 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f1c3 0307 	rsb	r3, r3, #7
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	bf28      	it	cs
 80022f2:	2304      	movcs	r3, #4
 80022f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3304      	adds	r3, #4
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d902      	bls.n	8002304 <NVIC_EncodePriority+0x30>
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3b03      	subs	r3, #3
 8002302:	e000      	b.n	8002306 <NVIC_EncodePriority+0x32>
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	f04f 32ff 	mov.w	r2, #4294967295
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	401a      	ands	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800231c:	f04f 31ff 	mov.w	r1, #4294967295
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43d9      	mvns	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	4313      	orrs	r3, r2
         );
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff ff4f 	bl	80021e4 <__NVIC_SetPriorityGrouping>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800234e:	b580      	push	{r7, lr}
 8002350:	b086      	sub	sp, #24
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
 800235a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002360:	f7ff ff64 	bl	800222c <__NVIC_GetPriorityGrouping>
 8002364:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68b9      	ldr	r1, [r7, #8]
 800236a:	6978      	ldr	r0, [r7, #20]
 800236c:	f7ff ffb2 	bl	80022d4 <NVIC_EncodePriority>
 8002370:	4602      	mov	r2, r0
 8002372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff81 	bl	8002280 <__NVIC_SetPriority>
}
 800237e:	bf00      	nop
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	4603      	mov	r3, r0
 800238e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff57 	bl	8002248 <__NVIC_EnableIRQ>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b08b      	sub	sp, #44	; 0x2c
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023b2:	2300      	movs	r3, #0
 80023b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b6:	e169      	b.n	800268c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023b8:	2201      	movs	r2, #1
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	f040 8158 	bne.w	8002686 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4a9a      	ldr	r2, [pc, #616]	; (8002644 <HAL_GPIO_Init+0x2a0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d05e      	beq.n	800249e <HAL_GPIO_Init+0xfa>
 80023e0:	4a98      	ldr	r2, [pc, #608]	; (8002644 <HAL_GPIO_Init+0x2a0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d875      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 80023e6:	4a98      	ldr	r2, [pc, #608]	; (8002648 <HAL_GPIO_Init+0x2a4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d058      	beq.n	800249e <HAL_GPIO_Init+0xfa>
 80023ec:	4a96      	ldr	r2, [pc, #600]	; (8002648 <HAL_GPIO_Init+0x2a4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d86f      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 80023f2:	4a96      	ldr	r2, [pc, #600]	; (800264c <HAL_GPIO_Init+0x2a8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d052      	beq.n	800249e <HAL_GPIO_Init+0xfa>
 80023f8:	4a94      	ldr	r2, [pc, #592]	; (800264c <HAL_GPIO_Init+0x2a8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d869      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 80023fe:	4a94      	ldr	r2, [pc, #592]	; (8002650 <HAL_GPIO_Init+0x2ac>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d04c      	beq.n	800249e <HAL_GPIO_Init+0xfa>
 8002404:	4a92      	ldr	r2, [pc, #584]	; (8002650 <HAL_GPIO_Init+0x2ac>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d863      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 800240a:	4a92      	ldr	r2, [pc, #584]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d046      	beq.n	800249e <HAL_GPIO_Init+0xfa>
 8002410:	4a90      	ldr	r2, [pc, #576]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d85d      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 8002416:	2b12      	cmp	r3, #18
 8002418:	d82a      	bhi.n	8002470 <HAL_GPIO_Init+0xcc>
 800241a:	2b12      	cmp	r3, #18
 800241c:	d859      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 800241e:	a201      	add	r2, pc, #4	; (adr r2, 8002424 <HAL_GPIO_Init+0x80>)
 8002420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002424:	0800249f 	.word	0x0800249f
 8002428:	08002479 	.word	0x08002479
 800242c:	0800248b 	.word	0x0800248b
 8002430:	080024cd 	.word	0x080024cd
 8002434:	080024d3 	.word	0x080024d3
 8002438:	080024d3 	.word	0x080024d3
 800243c:	080024d3 	.word	0x080024d3
 8002440:	080024d3 	.word	0x080024d3
 8002444:	080024d3 	.word	0x080024d3
 8002448:	080024d3 	.word	0x080024d3
 800244c:	080024d3 	.word	0x080024d3
 8002450:	080024d3 	.word	0x080024d3
 8002454:	080024d3 	.word	0x080024d3
 8002458:	080024d3 	.word	0x080024d3
 800245c:	080024d3 	.word	0x080024d3
 8002460:	080024d3 	.word	0x080024d3
 8002464:	080024d3 	.word	0x080024d3
 8002468:	08002481 	.word	0x08002481
 800246c:	08002495 	.word	0x08002495
 8002470:	4a79      	ldr	r2, [pc, #484]	; (8002658 <HAL_GPIO_Init+0x2b4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d013      	beq.n	800249e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002476:	e02c      	b.n	80024d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	623b      	str	r3, [r7, #32]
          break;
 800247e:	e029      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	3304      	adds	r3, #4
 8002486:	623b      	str	r3, [r7, #32]
          break;
 8002488:	e024      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	3308      	adds	r3, #8
 8002490:	623b      	str	r3, [r7, #32]
          break;
 8002492:	e01f      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	330c      	adds	r3, #12
 800249a:	623b      	str	r3, [r7, #32]
          break;
 800249c:	e01a      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d102      	bne.n	80024ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024a6:	2304      	movs	r3, #4
 80024a8:	623b      	str	r3, [r7, #32]
          break;
 80024aa:	e013      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d105      	bne.n	80024c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b4:	2308      	movs	r3, #8
 80024b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	611a      	str	r2, [r3, #16]
          break;
 80024be:	e009      	b.n	80024d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024c0:	2308      	movs	r3, #8
 80024c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	615a      	str	r2, [r3, #20]
          break;
 80024ca:	e003      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024cc:	2300      	movs	r3, #0
 80024ce:	623b      	str	r3, [r7, #32]
          break;
 80024d0:	e000      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          break;
 80024d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2bff      	cmp	r3, #255	; 0xff
 80024d8:	d801      	bhi.n	80024de <HAL_GPIO_Init+0x13a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	e001      	b.n	80024e2 <HAL_GPIO_Init+0x13e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3304      	adds	r3, #4
 80024e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2bff      	cmp	r3, #255	; 0xff
 80024e8:	d802      	bhi.n	80024f0 <HAL_GPIO_Init+0x14c>
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	e002      	b.n	80024f6 <HAL_GPIO_Init+0x152>
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	3b08      	subs	r3, #8
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	210f      	movs	r1, #15
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	401a      	ands	r2, r3
 8002508:	6a39      	ldr	r1, [r7, #32]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	431a      	orrs	r2, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 80b1 	beq.w	8002686 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002524:	4b4d      	ldr	r3, [pc, #308]	; (800265c <HAL_GPIO_Init+0x2b8>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	4a4c      	ldr	r2, [pc, #304]	; (800265c <HAL_GPIO_Init+0x2b8>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6193      	str	r3, [r2, #24]
 8002530:	4b4a      	ldr	r3, [pc, #296]	; (800265c <HAL_GPIO_Init+0x2b8>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800253c:	4a48      	ldr	r2, [pc, #288]	; (8002660 <HAL_GPIO_Init+0x2bc>)
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	3302      	adds	r3, #2
 8002544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002548:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	220f      	movs	r2, #15
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4013      	ands	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a40      	ldr	r2, [pc, #256]	; (8002664 <HAL_GPIO_Init+0x2c0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d013      	beq.n	8002590 <HAL_GPIO_Init+0x1ec>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a3f      	ldr	r2, [pc, #252]	; (8002668 <HAL_GPIO_Init+0x2c4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d00d      	beq.n	800258c <HAL_GPIO_Init+0x1e8>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a3e      	ldr	r2, [pc, #248]	; (800266c <HAL_GPIO_Init+0x2c8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d007      	beq.n	8002588 <HAL_GPIO_Init+0x1e4>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a3d      	ldr	r2, [pc, #244]	; (8002670 <HAL_GPIO_Init+0x2cc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_GPIO_Init+0x1e0>
 8002580:	2303      	movs	r3, #3
 8002582:	e006      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 8002584:	2304      	movs	r3, #4
 8002586:	e004      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 8002588:	2302      	movs	r3, #2
 800258a:	e002      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 8002590:	2300      	movs	r3, #0
 8002592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002594:	f002 0203 	and.w	r2, r2, #3
 8002598:	0092      	lsls	r2, r2, #2
 800259a:	4093      	lsls	r3, r2
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025a2:	492f      	ldr	r1, [pc, #188]	; (8002660 <HAL_GPIO_Init+0x2bc>)
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	089b      	lsrs	r3, r3, #2
 80025a8:	3302      	adds	r3, #2
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d006      	beq.n	80025ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025bc:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	492c      	ldr	r1, [pc, #176]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	608b      	str	r3, [r1, #8]
 80025c8:	e006      	b.n	80025d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025ca:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	4928      	ldr	r1, [pc, #160]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d006      	beq.n	80025f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025e4:	4b23      	ldr	r3, [pc, #140]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	4922      	ldr	r1, [pc, #136]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60cb      	str	r3, [r1, #12]
 80025f0:	e006      	b.n	8002600 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	491e      	ldr	r1, [pc, #120]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d006      	beq.n	800261a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800260c:	4b19      	ldr	r3, [pc, #100]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	4918      	ldr	r1, [pc, #96]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
 8002618:	e006      	b.n	8002628 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800261a:	4b16      	ldr	r3, [pc, #88]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	43db      	mvns	r3, r3
 8002622:	4914      	ldr	r1, [pc, #80]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 8002624:	4013      	ands	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d021      	beq.n	8002678 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002634:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	490e      	ldr	r1, [pc, #56]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	600b      	str	r3, [r1, #0]
 8002640:	e021      	b.n	8002686 <HAL_GPIO_Init+0x2e2>
 8002642:	bf00      	nop
 8002644:	10320000 	.word	0x10320000
 8002648:	10310000 	.word	0x10310000
 800264c:	10220000 	.word	0x10220000
 8002650:	10210000 	.word	0x10210000
 8002654:	10120000 	.word	0x10120000
 8002658:	10110000 	.word	0x10110000
 800265c:	40021000 	.word	0x40021000
 8002660:	40010000 	.word	0x40010000
 8002664:	40010800 	.word	0x40010800
 8002668:	40010c00 	.word	0x40010c00
 800266c:	40011000 	.word	0x40011000
 8002670:	40011400 	.word	0x40011400
 8002674:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_GPIO_Init+0x304>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	43db      	mvns	r3, r3
 8002680:	4909      	ldr	r1, [pc, #36]	; (80026a8 <HAL_GPIO_Init+0x304>)
 8002682:	4013      	ands	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	3301      	adds	r3, #1
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	fa22 f303 	lsr.w	r3, r2, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	f47f ae8e 	bne.w	80023b8 <HAL_GPIO_Init+0x14>
  }
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	372c      	adds	r7, #44	; 0x2c
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	40010400 	.word	0x40010400

080026ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	887b      	ldrh	r3, [r7, #2]
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
 80026c8:	e001      	b.n	80026ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	807b      	strh	r3, [r7, #2]
 80026e6:	4613      	mov	r3, r2
 80026e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026ea:	787b      	ldrb	r3, [r7, #1]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026f0:	887a      	ldrh	r2, [r7, #2]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026f6:	e003      	b.n	8002700 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026f8:	887b      	ldrh	r3, [r7, #2]
 80026fa:	041a      	lsls	r2, r3, #16
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	611a      	str	r2, [r3, #16]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr
	...

0800270c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002716:	4b08      	ldr	r3, [pc, #32]	; (8002738 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d006      	beq.n	8002730 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002722:	4a05      	ldr	r2, [pc, #20]	; (8002738 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f806 	bl	800273c <HAL_GPIO_EXTI_Callback>
  }
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40010400 	.word	0x40010400

0800273c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e272      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 8087 	beq.w	800287e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002770:	4b92      	ldr	r3, [pc, #584]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 030c 	and.w	r3, r3, #12
 8002778:	2b04      	cmp	r3, #4
 800277a:	d00c      	beq.n	8002796 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800277c:	4b8f      	ldr	r3, [pc, #572]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 030c 	and.w	r3, r3, #12
 8002784:	2b08      	cmp	r3, #8
 8002786:	d112      	bne.n	80027ae <HAL_RCC_OscConfig+0x5e>
 8002788:	4b8c      	ldr	r3, [pc, #560]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002794:	d10b      	bne.n	80027ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002796:	4b89      	ldr	r3, [pc, #548]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d06c      	beq.n	800287c <HAL_RCC_OscConfig+0x12c>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d168      	bne.n	800287c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e24c      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b6:	d106      	bne.n	80027c6 <HAL_RCC_OscConfig+0x76>
 80027b8:	4b80      	ldr	r3, [pc, #512]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a7f      	ldr	r2, [pc, #508]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	e02e      	b.n	8002824 <HAL_RCC_OscConfig+0xd4>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x98>
 80027ce:	4b7b      	ldr	r3, [pc, #492]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a7a      	ldr	r2, [pc, #488]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	4b78      	ldr	r3, [pc, #480]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a77      	ldr	r2, [pc, #476]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	e01d      	b.n	8002824 <HAL_RCC_OscConfig+0xd4>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027f0:	d10c      	bne.n	800280c <HAL_RCC_OscConfig+0xbc>
 80027f2:	4b72      	ldr	r3, [pc, #456]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a71      	ldr	r2, [pc, #452]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	4b6f      	ldr	r3, [pc, #444]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a6e      	ldr	r2, [pc, #440]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e00b      	b.n	8002824 <HAL_RCC_OscConfig+0xd4>
 800280c:	4b6b      	ldr	r3, [pc, #428]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a6a      	ldr	r2, [pc, #424]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	4b68      	ldr	r3, [pc, #416]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a67      	ldr	r2, [pc, #412]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 800281e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002822:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d013      	beq.n	8002854 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7ff fcd0 	bl	80021d0 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002834:	f7ff fccc 	bl	80021d0 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	; 0x64
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e200      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002846:	4b5d      	ldr	r3, [pc, #372]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0xe4>
 8002852:	e014      	b.n	800287e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7ff fcbc 	bl	80021d0 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800285c:	f7ff fcb8 	bl	80021d0 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	; 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e1ec      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286e:	4b53      	ldr	r3, [pc, #332]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x10c>
 800287a:	e000      	b.n	800287e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d063      	beq.n	8002952 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800288a:	4b4c      	ldr	r3, [pc, #304]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00b      	beq.n	80028ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002896:	4b49      	ldr	r3, [pc, #292]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 030c 	and.w	r3, r3, #12
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d11c      	bne.n	80028dc <HAL_RCC_OscConfig+0x18c>
 80028a2:	4b46      	ldr	r3, [pc, #280]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d116      	bne.n	80028dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ae:	4b43      	ldr	r3, [pc, #268]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <HAL_RCC_OscConfig+0x176>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d001      	beq.n	80028c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e1c0      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c6:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	4939      	ldr	r1, [pc, #228]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028da:	e03a      	b.n	8002952 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d020      	beq.n	8002926 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e4:	4b36      	ldr	r3, [pc, #216]	; (80029c0 <HAL_RCC_OscConfig+0x270>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ea:	f7ff fc71 	bl	80021d0 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f2:	f7ff fc6d 	bl	80021d0 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e1a1      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002904:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002910:	4b2a      	ldr	r3, [pc, #168]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4927      	ldr	r1, [pc, #156]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]
 8002924:	e015      	b.n	8002952 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002926:	4b26      	ldr	r3, [pc, #152]	; (80029c0 <HAL_RCC_OscConfig+0x270>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7ff fc50 	bl	80021d0 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002934:	f7ff fc4c 	bl	80021d0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e180      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002946:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d03a      	beq.n	80029d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d019      	beq.n	800299a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002966:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <HAL_RCC_OscConfig+0x274>)
 8002968:	2201      	movs	r2, #1
 800296a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296c:	f7ff fc30 	bl	80021d0 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002974:	f7ff fc2c 	bl	80021d0 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e160      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002986:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002992:	2001      	movs	r0, #1
 8002994:	f000 faea 	bl	8002f6c <RCC_Delay>
 8002998:	e01c      	b.n	80029d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800299a:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <HAL_RCC_OscConfig+0x274>)
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a0:	f7ff fc16 	bl	80021d0 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a6:	e00f      	b.n	80029c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a8:	f7ff fc12 	bl	80021d0 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d908      	bls.n	80029c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e146      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
 80029c0:	42420000 	.word	0x42420000
 80029c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c8:	4b92      	ldr	r3, [pc, #584]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1e9      	bne.n	80029a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80a6 	beq.w	8002b2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e2:	2300      	movs	r3, #0
 80029e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e6:	4b8b      	ldr	r3, [pc, #556]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10d      	bne.n	8002a0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f2:	4b88      	ldr	r3, [pc, #544]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	4a87      	ldr	r2, [pc, #540]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 80029f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029fc:	61d3      	str	r3, [r2, #28]
 80029fe:	4b85      	ldr	r3, [pc, #532]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0e:	4b82      	ldr	r3, [pc, #520]	; (8002c18 <HAL_RCC_OscConfig+0x4c8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d118      	bne.n	8002a4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a1a:	4b7f      	ldr	r3, [pc, #508]	; (8002c18 <HAL_RCC_OscConfig+0x4c8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a7e      	ldr	r2, [pc, #504]	; (8002c18 <HAL_RCC_OscConfig+0x4c8>)
 8002a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a26:	f7ff fbd3 	bl	80021d0 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2e:	f7ff fbcf 	bl	80021d0 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b64      	cmp	r3, #100	; 0x64
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e103      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a40:	4b75      	ldr	r3, [pc, #468]	; (8002c18 <HAL_RCC_OscConfig+0x4c8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d106      	bne.n	8002a62 <HAL_RCC_OscConfig+0x312>
 8002a54:	4b6f      	ldr	r3, [pc, #444]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	4a6e      	ldr	r2, [pc, #440]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	6213      	str	r3, [r2, #32]
 8002a60:	e02d      	b.n	8002abe <HAL_RCC_OscConfig+0x36e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x334>
 8002a6a:	4b6a      	ldr	r3, [pc, #424]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	4a69      	ldr	r2, [pc, #420]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	f023 0301 	bic.w	r3, r3, #1
 8002a74:	6213      	str	r3, [r2, #32]
 8002a76:	4b67      	ldr	r3, [pc, #412]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	4a66      	ldr	r2, [pc, #408]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a7c:	f023 0304 	bic.w	r3, r3, #4
 8002a80:	6213      	str	r3, [r2, #32]
 8002a82:	e01c      	b.n	8002abe <HAL_RCC_OscConfig+0x36e>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2b05      	cmp	r3, #5
 8002a8a:	d10c      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x356>
 8002a8c:	4b61      	ldr	r3, [pc, #388]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	4a60      	ldr	r2, [pc, #384]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a92:	f043 0304 	orr.w	r3, r3, #4
 8002a96:	6213      	str	r3, [r2, #32]
 8002a98:	4b5e      	ldr	r3, [pc, #376]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4a5d      	ldr	r2, [pc, #372]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6213      	str	r3, [r2, #32]
 8002aa4:	e00b      	b.n	8002abe <HAL_RCC_OscConfig+0x36e>
 8002aa6:	4b5b      	ldr	r3, [pc, #364]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	4a5a      	ldr	r2, [pc, #360]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	6213      	str	r3, [r2, #32]
 8002ab2:	4b58      	ldr	r3, [pc, #352]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	4a57      	ldr	r2, [pc, #348]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	f023 0304 	bic.w	r3, r3, #4
 8002abc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d015      	beq.n	8002af2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac6:	f7ff fb83 	bl	80021d0 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002acc:	e00a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ace:	f7ff fb7f 	bl	80021d0 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e0b1      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae4:	4b4b      	ldr	r3, [pc, #300]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0ee      	beq.n	8002ace <HAL_RCC_OscConfig+0x37e>
 8002af0:	e014      	b.n	8002b1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af2:	f7ff fb6d 	bl	80021d0 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af8:	e00a      	b.n	8002b10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f7ff fb69 	bl	80021d0 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e09b      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b10:	4b40      	ldr	r3, [pc, #256]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1ee      	bne.n	8002afa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d105      	bne.n	8002b2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b22:	4b3c      	ldr	r3, [pc, #240]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	4a3b      	ldr	r2, [pc, #236]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8087 	beq.w	8002c46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b38:	4b36      	ldr	r3, [pc, #216]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d061      	beq.n	8002c08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d146      	bne.n	8002bda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4c:	4b33      	ldr	r3, [pc, #204]	; (8002c1c <HAL_RCC_OscConfig+0x4cc>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b52:	f7ff fb3d 	bl	80021d0 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5a:	f7ff fb39 	bl	80021d0 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e06d      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b6c:	4b29      	ldr	r3, [pc, #164]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f0      	bne.n	8002b5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b80:	d108      	bne.n	8002b94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b82:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	4921      	ldr	r1, [pc, #132]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b94:	4b1f      	ldr	r3, [pc, #124]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a19      	ldr	r1, [r3, #32]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	491b      	ldr	r1, [pc, #108]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bac:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <HAL_RCC_OscConfig+0x4cc>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7ff fb0d 	bl	80021d0 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bba:	f7ff fb09 	bl	80021d0 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e03d      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x46a>
 8002bd8:	e035      	b.n	8002c46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <HAL_RCC_OscConfig+0x4cc>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7ff faf6 	bl	80021d0 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be8:	f7ff faf2 	bl	80021d0 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e026      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bfa:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_RCC_OscConfig+0x4c4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x498>
 8002c06:	e01e      	b.n	8002c46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d107      	bne.n	8002c20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e019      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40007000 	.word	0x40007000
 8002c1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <HAL_RCC_OscConfig+0x500>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d106      	bne.n	8002c42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d001      	beq.n	8002c46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40021000 	.word	0x40021000

08002c54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0d0      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c68:	4b6a      	ldr	r3, [pc, #424]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d910      	bls.n	8002c98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b67      	ldr	r3, [pc, #412]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 0207 	bic.w	r2, r3, #7
 8002c7e:	4965      	ldr	r1, [pc, #404]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b63      	ldr	r3, [pc, #396]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0b8      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d020      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb0:	4b59      	ldr	r3, [pc, #356]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	4a58      	ldr	r2, [pc, #352]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc8:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	4a52      	ldr	r2, [pc, #328]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd4:	4b50      	ldr	r3, [pc, #320]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	494d      	ldr	r1, [pc, #308]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d040      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d107      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d115      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e07f      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d12:	4b41      	ldr	r3, [pc, #260]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d109      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e073      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d22:	4b3d      	ldr	r3, [pc, #244]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e06b      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d32:	4b39      	ldr	r3, [pc, #228]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f023 0203 	bic.w	r2, r3, #3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4936      	ldr	r1, [pc, #216]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d44:	f7ff fa44 	bl	80021d0 <HAL_GetTick>
 8002d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4a:	e00a      	b.n	8002d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d4c:	f7ff fa40 	bl	80021d0 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e053      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d62:	4b2d      	ldr	r3, [pc, #180]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 020c 	and.w	r2, r3, #12
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d1eb      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d74:	4b27      	ldr	r3, [pc, #156]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d210      	bcs.n	8002da4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d82:	4b24      	ldr	r3, [pc, #144]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 0207 	bic.w	r2, r3, #7
 8002d8a:	4922      	ldr	r1, [pc, #136]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	4b20      	ldr	r3, [pc, #128]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e032      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db0:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4916      	ldr	r1, [pc, #88]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d009      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dce:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	490e      	ldr	r1, [pc, #56]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002de2:	f000 f821 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 8002de6:	4602      	mov	r2, r0
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	490a      	ldr	r1, [pc, #40]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002df4:	5ccb      	ldrb	r3, [r1, r3]
 8002df6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfa:	4a09      	ldr	r2, [pc, #36]	; (8002e20 <HAL_RCC_ClockConfig+0x1cc>)
 8002dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_RCC_ClockConfig+0x1d0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff f8f8 	bl	8001ff8 <HAL_InitTick>

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40022000 	.word	0x40022000
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	08005304 	.word	0x08005304
 8002e20:	20000004 	.word	0x20000004
 8002e24:	20000008 	.word	0x20000008

08002e28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e42:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x94>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d002      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0x30>
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d003      	beq.n	8002e5e <HAL_RCC_GetSysClockFreq+0x36>
 8002e56:	e027      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e5a:	613b      	str	r3, [r7, #16]
      break;
 8002e5c:	e027      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	0c9b      	lsrs	r3, r3, #18
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	4a17      	ldr	r2, [pc, #92]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e68:	5cd3      	ldrb	r3, [r2, r3]
 8002e6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d010      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e76:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x94>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	0c5b      	lsrs	r3, r3, #17
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	4a11      	ldr	r2, [pc, #68]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e82:	5cd3      	ldrb	r3, [r2, r3]
 8002e84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a0d      	ldr	r2, [pc, #52]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e8a:	fb03 f202 	mul.w	r2, r3, r2
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	e004      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a0c      	ldr	r2, [pc, #48]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ea0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	613b      	str	r3, [r7, #16]
      break;
 8002ea6:	e002      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eaa:	613b      	str	r3, [r7, #16]
      break;
 8002eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eae:	693b      	ldr	r3, [r7, #16]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	007a1200 	.word	0x007a1200
 8002ec4:	0800531c 	.word	0x0800531c
 8002ec8:	0800532c 	.word	0x0800532c
 8002ecc:	003d0900 	.word	0x003d0900

08002ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed4:	4b02      	ldr	r3, [pc, #8]	; (8002ee0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr
 8002ee0:	20000004 	.word	0x20000004

08002ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ee8:	f7ff fff2 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	0adb      	lsrs	r3, r3, #11
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	4903      	ldr	r1, [pc, #12]	; (8002f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40021000 	.word	0x40021000
 8002f08:	08005314 	.word	0x08005314

08002f0c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	220f      	movs	r2, #15
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f1c:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <HAL_RCC_GetClockConfig+0x58>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0203 	and.w	r2, r3, #3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f28:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <HAL_RCC_GetClockConfig+0x58>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_GetClockConfig+0x58>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <HAL_RCC_GetClockConfig+0x58>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	08db      	lsrs	r3, r3, #3
 8002f46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_RCC_GetClockConfig+0x5c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0207 	and.w	r2, r3, #7
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40022000 	.word	0x40022000

08002f6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f74:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <RCC_Delay+0x34>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <RCC_Delay+0x38>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	0a5b      	lsrs	r3, r3, #9
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	fb02 f303 	mul.w	r3, r2, r3
 8002f86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f88:	bf00      	nop
  }
  while (Delay --);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1e5a      	subs	r2, r3, #1
 8002f8e:	60fa      	str	r2, [r7, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f9      	bne.n	8002f88 <RCC_Delay+0x1c>
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr
 8002fa0:	20000004 	.word	0x20000004
 8002fa4:	10624dd3 	.word	0x10624dd3

08002fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e041      	b.n	800303e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f839 	bl	8003046 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	f000 fcb8 	bl	800395c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr

08003058 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	d001      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e03a      	b.n	80030e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a18      	ldr	r2, [pc, #96]	; (80030f0 <HAL_TIM_Base_Start_IT+0x98>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00e      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x58>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309a:	d009      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x58>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a14      	ldr	r2, [pc, #80]	; (80030f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d004      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x58>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a13      	ldr	r2, [pc, #76]	; (80030f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d111      	bne.n	80030d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b06      	cmp	r3, #6
 80030c0:	d010      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0201 	orr.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d2:	e007      	b.n	80030e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr
 80030f0:	40012c00 	.word	0x40012c00
 80030f4:	40000400 	.word	0x40000400
 80030f8:	40000800 	.word	0x40000800

080030fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e041      	b.n	8003192 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fe feb0 	bl	8001e88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3304      	adds	r3, #4
 8003138:	4619      	mov	r1, r3
 800313a:	4610      	mov	r0, r2
 800313c:	f000 fc0e 	bl	800395c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d109      	bne.n	80031c0 <HAL_TIM_PWM_Start+0x24>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	bf14      	ite	ne
 80031b8:	2301      	movne	r3, #1
 80031ba:	2300      	moveq	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	e022      	b.n	8003206 <HAL_TIM_PWM_Start+0x6a>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d109      	bne.n	80031da <HAL_TIM_PWM_Start+0x3e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	bf14      	ite	ne
 80031d2:	2301      	movne	r3, #1
 80031d4:	2300      	moveq	r3, #0
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	e015      	b.n	8003206 <HAL_TIM_PWM_Start+0x6a>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d109      	bne.n	80031f4 <HAL_TIM_PWM_Start+0x58>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	bf14      	ite	ne
 80031ec:	2301      	movne	r3, #1
 80031ee:	2300      	moveq	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	e008      	b.n	8003206 <HAL_TIM_PWM_Start+0x6a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	bf14      	ite	ne
 8003200:	2301      	movne	r3, #1
 8003202:	2300      	moveq	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e05e      	b.n	80032cc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d104      	bne.n	800321e <HAL_TIM_PWM_Start+0x82>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800321c:	e013      	b.n	8003246 <HAL_TIM_PWM_Start+0xaa>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b04      	cmp	r3, #4
 8003222:	d104      	bne.n	800322e <HAL_TIM_PWM_Start+0x92>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800322c:	e00b      	b.n	8003246 <HAL_TIM_PWM_Start+0xaa>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b08      	cmp	r3, #8
 8003232:	d104      	bne.n	800323e <HAL_TIM_PWM_Start+0xa2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800323c:	e003      	b.n	8003246 <HAL_TIM_PWM_Start+0xaa>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2201      	movs	r2, #1
 800324c:	6839      	ldr	r1, [r7, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fd6e 	bl	8003d30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1e      	ldr	r2, [pc, #120]	; (80032d4 <HAL_TIM_PWM_Start+0x138>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d107      	bne.n	800326e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800326c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a18      	ldr	r2, [pc, #96]	; (80032d4 <HAL_TIM_PWM_Start+0x138>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00e      	beq.n	8003296 <HAL_TIM_PWM_Start+0xfa>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003280:	d009      	beq.n	8003296 <HAL_TIM_PWM_Start+0xfa>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a14      	ldr	r2, [pc, #80]	; (80032d8 <HAL_TIM_PWM_Start+0x13c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d004      	beq.n	8003296 <HAL_TIM_PWM_Start+0xfa>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a12      	ldr	r2, [pc, #72]	; (80032dc <HAL_TIM_PWM_Start+0x140>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d111      	bne.n	80032ba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2b06      	cmp	r3, #6
 80032a6:	d010      	beq.n	80032ca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b8:	e007      	b.n	80032ca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0201 	orr.w	r2, r2, #1
 80032c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40012c00 	.word	0x40012c00
 80032d8:	40000400 	.word	0x40000400
 80032dc:	40000800 	.word	0x40000800

080032e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e093      	b.n	800341c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d106      	bne.n	800330e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7fe fdd9 	bl	8001ec0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003324:	f023 0307 	bic.w	r3, r3, #7
 8003328:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3304      	adds	r3, #4
 8003332:	4619      	mov	r1, r3
 8003334:	4610      	mov	r0, r2
 8003336:	f000 fb11 	bl	800395c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003362:	f023 0303 	bic.w	r3, r3, #3
 8003366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	4313      	orrs	r3, r2
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003380:	f023 030c 	bic.w	r3, r3, #12
 8003384:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800338c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003390:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	4313      	orrs	r3, r2
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	011a      	lsls	r2, r3, #4
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	031b      	lsls	r3, r3, #12
 80033b0:	4313      	orrs	r3, r2
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80033be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	4313      	orrs	r3, r2
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003434:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800343c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003444:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800344c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d110      	bne.n	8003476 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d102      	bne.n	8003460 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800345a:	7b7b      	ldrb	r3, [r7, #13]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d001      	beq.n	8003464 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e089      	b.n	8003578 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003474:	e031      	b.n	80034da <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b04      	cmp	r3, #4
 800347a:	d110      	bne.n	800349e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800347c:	7bbb      	ldrb	r3, [r7, #14]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d102      	bne.n	8003488 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003482:	7b3b      	ldrb	r3, [r7, #12]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d001      	beq.n	800348c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e075      	b.n	8003578 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800349c:	e01d      	b.n	80034da <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d108      	bne.n	80034b6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034a4:	7bbb      	ldrb	r3, [r7, #14]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d105      	bne.n	80034b6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034aa:	7b7b      	ldrb	r3, [r7, #13]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d102      	bne.n	80034b6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034b0:	7b3b      	ldrb	r3, [r7, #12]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d001      	beq.n	80034ba <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e05e      	b.n	8003578 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2202      	movs	r2, #2
 80034ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2202      	movs	r2, #2
 80034d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_TIM_Encoder_Start_IT+0xc4>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d010      	beq.n	8003508 <HAL_TIM_Encoder_Start_IT+0xe4>
 80034e6:	e01f      	b.n	8003528 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2201      	movs	r2, #1
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fc1d 	bl	8003d30 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0202 	orr.w	r2, r2, #2
 8003504:	60da      	str	r2, [r3, #12]
      break;
 8003506:	e02e      	b.n	8003566 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2201      	movs	r2, #1
 800350e:	2104      	movs	r1, #4
 8003510:	4618      	mov	r0, r3
 8003512:	f000 fc0d 	bl	8003d30 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0204 	orr.w	r2, r2, #4
 8003524:	60da      	str	r2, [r3, #12]
      break;
 8003526:	e01e      	b.n	8003566 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2201      	movs	r2, #1
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fbfd 	bl	8003d30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2201      	movs	r2, #1
 800353c:	2104      	movs	r1, #4
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fbf6 	bl	8003d30 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0202 	orr.w	r2, r2, #2
 8003552:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0204 	orr.w	r2, r2, #4
 8003562:	60da      	str	r2, [r3, #12]
      break;
 8003564:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0201 	orr.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b02      	cmp	r3, #2
 8003594:	d122      	bne.n	80035dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d11b      	bne.n	80035dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0202 	mvn.w	r2, #2
 80035ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f9af 	bl	8003926 <HAL_TIM_IC_CaptureCallback>
 80035c8:	e005      	b.n	80035d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f9a2 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f9b1 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d122      	bne.n	8003630 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d11b      	bne.n	8003630 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0204 	mvn.w	r2, #4
 8003600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2202      	movs	r2, #2
 8003606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f985 	bl	8003926 <HAL_TIM_IC_CaptureCallback>
 800361c:	e005      	b.n	800362a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f978 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f987 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b08      	cmp	r3, #8
 800363c:	d122      	bne.n	8003684 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b08      	cmp	r3, #8
 800364a:	d11b      	bne.n	8003684 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0208 	mvn.w	r2, #8
 8003654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2204      	movs	r2, #4
 800365a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f95b 	bl	8003926 <HAL_TIM_IC_CaptureCallback>
 8003670:	e005      	b.n	800367e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f94e 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f95d 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b10      	cmp	r3, #16
 8003690:	d122      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f003 0310 	and.w	r3, r3, #16
 800369c:	2b10      	cmp	r3, #16
 800369e:	d11b      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0210 	mvn.w	r2, #16
 80036a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2208      	movs	r2, #8
 80036ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f931 	bl	8003926 <HAL_TIM_IC_CaptureCallback>
 80036c4:	e005      	b.n	80036d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f924 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f933 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d10e      	bne.n	8003704 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d107      	bne.n	8003704 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0201 	mvn.w	r2, #1
 80036fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fe fb72 	bl	8001de8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	2b80      	cmp	r3, #128	; 0x80
 8003710:	d10e      	bne.n	8003730 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371c:	2b80      	cmp	r3, #128	; 0x80
 800371e:	d107      	bne.n	8003730 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fb8b 	bl	8003e46 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373a:	2b40      	cmp	r3, #64	; 0x40
 800373c:	d10e      	bne.n	800375c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003748:	2b40      	cmp	r3, #64	; 0x40
 800374a:	d107      	bne.n	800375c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f8f7 	bl	800394a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b20      	cmp	r3, #32
 8003768:	d10e      	bne.n	8003788 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b20      	cmp	r3, #32
 8003776:	d107      	bne.n	8003788 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0220 	mvn.w	r2, #32
 8003780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fb56 	bl	8003e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e0ae      	b.n	800390c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b0c      	cmp	r3, #12
 80037ba:	f200 809f 	bhi.w	80038fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80037be:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c4:	080037f9 	.word	0x080037f9
 80037c8:	080038fd 	.word	0x080038fd
 80037cc:	080038fd 	.word	0x080038fd
 80037d0:	080038fd 	.word	0x080038fd
 80037d4:	08003839 	.word	0x08003839
 80037d8:	080038fd 	.word	0x080038fd
 80037dc:	080038fd 	.word	0x080038fd
 80037e0:	080038fd 	.word	0x080038fd
 80037e4:	0800387b 	.word	0x0800387b
 80037e8:	080038fd 	.word	0x080038fd
 80037ec:	080038fd 	.word	0x080038fd
 80037f0:	080038fd 	.word	0x080038fd
 80037f4:	080038bb 	.word	0x080038bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f90e 	bl	8003a20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0208 	orr.w	r2, r2, #8
 8003812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0204 	bic.w	r2, r2, #4
 8003822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6999      	ldr	r1, [r3, #24]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	619a      	str	r2, [r3, #24]
      break;
 8003836:	e064      	b.n	8003902 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f954 	bl	8003aec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699a      	ldr	r2, [r3, #24]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699a      	ldr	r2, [r3, #24]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6999      	ldr	r1, [r3, #24]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	021a      	lsls	r2, r3, #8
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	619a      	str	r2, [r3, #24]
      break;
 8003878:	e043      	b.n	8003902 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	4618      	mov	r0, r3
 8003882:	f000 f99d 	bl	8003bc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	69da      	ldr	r2, [r3, #28]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0208 	orr.w	r2, r2, #8
 8003894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0204 	bic.w	r2, r2, #4
 80038a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69d9      	ldr	r1, [r3, #28]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	61da      	str	r2, [r3, #28]
      break;
 80038b8:	e023      	b.n	8003902 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68b9      	ldr	r1, [r7, #8]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 f9e7 	bl	8003c94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69da      	ldr	r2, [r3, #28]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69da      	ldr	r2, [r3, #28]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69d9      	ldr	r1, [r3, #28]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	021a      	lsls	r2, r3, #8
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	61da      	str	r2, [r3, #28]
      break;
 80038fa:	e002      	b.n	8003902 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003900:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800390a:	7dfb      	ldrb	r3, [r7, #23]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr

0800394a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a29      	ldr	r2, [pc, #164]	; (8003a14 <TIM_Base_SetConfig+0xb8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00b      	beq.n	800398c <TIM_Base_SetConfig+0x30>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397a:	d007      	beq.n	800398c <TIM_Base_SetConfig+0x30>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a26      	ldr	r2, [pc, #152]	; (8003a18 <TIM_Base_SetConfig+0xbc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d003      	beq.n	800398c <TIM_Base_SetConfig+0x30>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a25      	ldr	r2, [pc, #148]	; (8003a1c <TIM_Base_SetConfig+0xc0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d108      	bne.n	800399e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a1c      	ldr	r2, [pc, #112]	; (8003a14 <TIM_Base_SetConfig+0xb8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00b      	beq.n	80039be <TIM_Base_SetConfig+0x62>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ac:	d007      	beq.n	80039be <TIM_Base_SetConfig+0x62>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a19      	ldr	r2, [pc, #100]	; (8003a18 <TIM_Base_SetConfig+0xbc>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d003      	beq.n	80039be <TIM_Base_SetConfig+0x62>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a18      	ldr	r2, [pc, #96]	; (8003a1c <TIM_Base_SetConfig+0xc0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d108      	bne.n	80039d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a07      	ldr	r2, [pc, #28]	; (8003a14 <TIM_Base_SetConfig+0xb8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d103      	bne.n	8003a04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	615a      	str	r2, [r3, #20]
}
 8003a0a:	bf00      	nop
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	40012c00 	.word	0x40012c00
 8003a18:	40000400 	.word	0x40000400
 8003a1c:	40000800 	.word	0x40000800

08003a20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	f023 0201 	bic.w	r2, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0303 	bic.w	r3, r3, #3
 8003a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f023 0302 	bic.w	r3, r3, #2
 8003a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a1c      	ldr	r2, [pc, #112]	; (8003ae8 <TIM_OC1_SetConfig+0xc8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d10c      	bne.n	8003a96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f023 0308 	bic.w	r3, r3, #8
 8003a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f023 0304 	bic.w	r3, r3, #4
 8003a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a13      	ldr	r2, [pc, #76]	; (8003ae8 <TIM_OC1_SetConfig+0xc8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d111      	bne.n	8003ac2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	621a      	str	r2, [r3, #32]
}
 8003adc:	bf00      	nop
 8003ade:	371c      	adds	r7, #28
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40012c00 	.word	0x40012c00

08003aec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f023 0210 	bic.w	r2, r3, #16
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	021b      	lsls	r3, r3, #8
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f023 0320 	bic.w	r3, r3, #32
 8003b36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a1d      	ldr	r2, [pc, #116]	; (8003bbc <TIM_OC2_SetConfig+0xd0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d10d      	bne.n	8003b68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a14      	ldr	r2, [pc, #80]	; (8003bbc <TIM_OC2_SetConfig+0xd0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d113      	bne.n	8003b98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	621a      	str	r2, [r3, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr
 8003bbc:	40012c00 	.word	0x40012c00

08003bc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0303 	bic.w	r3, r3, #3
 8003bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a1d      	ldr	r2, [pc, #116]	; (8003c90 <TIM_OC3_SetConfig+0xd0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d10d      	bne.n	8003c3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	021b      	lsls	r3, r3, #8
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a14      	ldr	r2, [pc, #80]	; (8003c90 <TIM_OC3_SetConfig+0xd0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d113      	bne.n	8003c6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	621a      	str	r2, [r3, #32]
}
 8003c84:	bf00      	nop
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40012c00 	.word	0x40012c00

08003c94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	021b      	lsls	r3, r3, #8
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	031b      	lsls	r3, r3, #12
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a0f      	ldr	r2, [pc, #60]	; (8003d2c <TIM_OC4_SetConfig+0x98>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d109      	bne.n	8003d08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	019b      	lsls	r3, r3, #6
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	621a      	str	r2, [r3, #32]
}
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr
 8003d2c:	40012c00 	.word	0x40012c00

08003d30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f003 031f 	and.w	r3, r3, #31
 8003d42:	2201      	movs	r2, #1
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a1a      	ldr	r2, [r3, #32]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	43db      	mvns	r3, r3
 8003d52:	401a      	ands	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a1a      	ldr	r2, [r3, #32]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f003 031f 	and.w	r3, r3, #31
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	fa01 f303 	lsl.w	r3, r1, r3
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	621a      	str	r2, [r3, #32]
}
 8003d6e:	bf00      	nop
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr

08003d78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e046      	b.n	8003e1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a16      	ldr	r2, [pc, #88]	; (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00e      	beq.n	8003df2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ddc:	d009      	beq.n	8003df2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a12      	ldr	r2, [pc, #72]	; (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d004      	beq.n	8003df2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a10      	ldr	r2, [pc, #64]	; (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d10c      	bne.n	8003e0c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003df8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr
 8003e28:	40012c00 	.word	0x40012c00
 8003e2c:	40000400 	.word	0x40000400
 8003e30:	40000800 	.word	0x40000800

08003e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr

08003e46 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr

08003e58 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e6a:	2b84      	cmp	r3, #132	; 0x84
 8003e6c:	d005      	beq.n	8003e7a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4413      	add	r3, r2
 8003e76:	3303      	adds	r3, #3
 8003e78:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e8a:	f000 fad1 	bl	8004430 <vTaskStartScheduler>
  
  return osOK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e96:	b089      	sub	sp, #36	; 0x24
 8003e98:	af04      	add	r7, sp, #16
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d020      	beq.n	8003ee8 <osThreadCreate+0x54>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d01c      	beq.n	8003ee8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685c      	ldr	r4, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681d      	ldr	r5, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691e      	ldr	r6, [r3, #16]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff ffc9 	bl	8003e58 <makeFreeRtosPriority>
 8003ec6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ed0:	9202      	str	r2, [sp, #8]
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	9100      	str	r1, [sp, #0]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	4632      	mov	r2, r6
 8003eda:	4629      	mov	r1, r5
 8003edc:	4620      	mov	r0, r4
 8003ede:	f000 f8e8 	bl	80040b2 <xTaskCreateStatic>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	e01c      	b.n	8003f22 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685c      	ldr	r4, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ef4:	b29e      	uxth	r6, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff ffab 	bl	8003e58 <makeFreeRtosPriority>
 8003f02:	4602      	mov	r2, r0
 8003f04:	f107 030c 	add.w	r3, r7, #12
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	9200      	str	r2, [sp, #0]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	4632      	mov	r2, r6
 8003f10:	4629      	mov	r1, r5
 8003f12:	4620      	mov	r0, r4
 8003f14:	f000 f929 	bl	800416a <xTaskCreate>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d001      	beq.n	8003f22 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e000      	b.n	8003f24 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003f22:	68fb      	ldr	r3, [r7, #12]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f2c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <osDelay+0x16>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	e000      	b.n	8003f44 <osDelay+0x18>
 8003f42:	2301      	movs	r3, #1
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fa3f 	bl	80043c8 <vTaskDelay>
  
  return osOK;
 8003f4a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f103 0208 	add.w	r2, r3, #8
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f103 0208 	add.w	r2, r3, #8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f103 0208 	add.w	r2, r3, #8
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr

08003f92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr

08003faa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003faa:	b480      	push	{r7}
 8003fac:	b085      	sub	sp, #20
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	601a      	str	r2, [r3, #0]
}
 8003fe6:	bf00      	nop
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr

08003ff0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004006:	d103      	bne.n	8004010 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	e00c      	b.n	800402a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3308      	adds	r3, #8
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	e002      	b.n	800401e <vListInsert+0x2e>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	429a      	cmp	r2, r3
 8004028:	d2f6      	bcs.n	8004018 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	601a      	str	r2, [r3, #0]
}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr

08004060 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6892      	ldr	r2, [r2, #8]
 8004076:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6852      	ldr	r2, [r2, #4]
 8004080:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	429a      	cmp	r2, r3
 800408a:	d103      	bne.n	8004094 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	1e5a      	subs	r2, r3, #1
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b08e      	sub	sp, #56	; 0x38
 80040b6:	af04      	add	r7, sp, #16
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	607a      	str	r2, [r7, #4]
 80040be:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10a      	bne.n	80040dc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040d8:	bf00      	nop
 80040da:	e7fe      	b.n	80040da <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <xTaskCreateStatic+0x46>
	__asm volatile
 80040e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	61fb      	str	r3, [r7, #28]
}
 80040f4:	bf00      	nop
 80040f6:	e7fe      	b.n	80040f6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040f8:	2354      	movs	r3, #84	; 0x54
 80040fa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	2b54      	cmp	r3, #84	; 0x54
 8004100:	d00a      	beq.n	8004118 <xTaskCreateStatic+0x66>
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	61bb      	str	r3, [r7, #24]
}
 8004114:	bf00      	nop
 8004116:	e7fe      	b.n	8004116 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411a:	2b00      	cmp	r3, #0
 800411c:	d01e      	beq.n	800415c <xTaskCreateStatic+0xaa>
 800411e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004120:	2b00      	cmp	r3, #0
 8004122:	d01b      	beq.n	800415c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800412c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	2202      	movs	r2, #2
 8004132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004136:	2300      	movs	r3, #0
 8004138:	9303      	str	r3, [sp, #12]
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	9302      	str	r3, [sp, #8]
 800413e:	f107 0314 	add.w	r3, r7, #20
 8004142:	9301      	str	r3, [sp, #4]
 8004144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	68b9      	ldr	r1, [r7, #8]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 f850 	bl	80041f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004154:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004156:	f000 f8cd 	bl	80042f4 <prvAddNewTaskToReadyList>
 800415a:	e001      	b.n	8004160 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004160:	697b      	ldr	r3, [r7, #20]
	}
 8004162:	4618      	mov	r0, r3
 8004164:	3728      	adds	r7, #40	; 0x28
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800416a:	b580      	push	{r7, lr}
 800416c:	b08c      	sub	sp, #48	; 0x30
 800416e:	af04      	add	r7, sp, #16
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	4613      	mov	r3, r2
 8004178:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800417a:	88fb      	ldrh	r3, [r7, #6]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fe6e 	bl	8004e60 <pvPortMalloc>
 8004184:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00e      	beq.n	80041aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800418c:	2054      	movs	r0, #84	; 0x54
 800418e:	f000 fe67 	bl	8004e60 <pvPortMalloc>
 8004192:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	631a      	str	r2, [r3, #48]	; 0x30
 80041a0:	e005      	b.n	80041ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041a2:	6978      	ldr	r0, [r7, #20]
 80041a4:	f000 ff20 	bl	8004fe8 <vPortFree>
 80041a8:	e001      	b.n	80041ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d017      	beq.n	80041e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041bc:	88fa      	ldrh	r2, [r7, #6]
 80041be:	2300      	movs	r3, #0
 80041c0:	9303      	str	r3, [sp, #12]
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	9302      	str	r3, [sp, #8]
 80041c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c8:	9301      	str	r3, [sp, #4]
 80041ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f80e 	bl	80041f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041d8:	69f8      	ldr	r0, [r7, #28]
 80041da:	f000 f88b 	bl	80042f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041de:	2301      	movs	r3, #1
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	e002      	b.n	80041ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041e4:	f04f 33ff 	mov.w	r3, #4294967295
 80041e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041ea:	69bb      	ldr	r3, [r7, #24]
	}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800420c:	3b01      	subs	r3, #1
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	f023 0307 	bic.w	r3, r3, #7
 800421a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <prvInitialiseNewTask+0x48>
	__asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	617b      	str	r3, [r7, #20]
}
 8004238:	bf00      	nop
 800423a:	e7fe      	b.n	800423a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800423c:	2300      	movs	r3, #0
 800423e:	61fb      	str	r3, [r7, #28]
 8004240:	e012      	b.n	8004268 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	4413      	add	r3, r2
 8004248:	7819      	ldrb	r1, [r3, #0]
 800424a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	4413      	add	r3, r2
 8004250:	3334      	adds	r3, #52	; 0x34
 8004252:	460a      	mov	r2, r1
 8004254:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	4413      	add	r3, r2
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d006      	beq.n	8004270 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	3301      	adds	r3, #1
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	2b0f      	cmp	r3, #15
 800426c:	d9e9      	bls.n	8004242 <prvInitialiseNewTask+0x4e>
 800426e:	e000      	b.n	8004272 <prvInitialiseNewTask+0x7e>
		{
			break;
 8004270:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	2b06      	cmp	r3, #6
 800427e:	d901      	bls.n	8004284 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004280:	2306      	movs	r3, #6
 8004282:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004288:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800428e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	2200      	movs	r2, #0
 8004294:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004298:	3304      	adds	r3, #4
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff fe79 	bl	8003f92 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	3318      	adds	r3, #24
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff fe74 	bl	8003f92 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b2:	f1c3 0207 	rsb	r2, r3, #7
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c2:	2200      	movs	r2, #0
 80042c4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	68f9      	ldr	r1, [r7, #12]
 80042d2:	69b8      	ldr	r0, [r7, #24]
 80042d4:	f000 fc0e 	bl	8004af4 <pxPortInitialiseStack>
 80042d8:	4602      	mov	r2, r0
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80042de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042ea:	bf00      	nop
 80042ec:	3720      	adds	r7, #32
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042fc:	f000 fcee 	bl	8004cdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004300:	4b2a      	ldr	r3, [pc, #168]	; (80043ac <prvAddNewTaskToReadyList+0xb8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3301      	adds	r3, #1
 8004306:	4a29      	ldr	r2, [pc, #164]	; (80043ac <prvAddNewTaskToReadyList+0xb8>)
 8004308:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800430a:	4b29      	ldr	r3, [pc, #164]	; (80043b0 <prvAddNewTaskToReadyList+0xbc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004312:	4a27      	ldr	r2, [pc, #156]	; (80043b0 <prvAddNewTaskToReadyList+0xbc>)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004318:	4b24      	ldr	r3, [pc, #144]	; (80043ac <prvAddNewTaskToReadyList+0xb8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d110      	bne.n	8004342 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004320:	f000 fac0 	bl	80048a4 <prvInitialiseTaskLists>
 8004324:	e00d      	b.n	8004342 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004326:	4b23      	ldr	r3, [pc, #140]	; (80043b4 <prvAddNewTaskToReadyList+0xc0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800432e:	4b20      	ldr	r3, [pc, #128]	; (80043b0 <prvAddNewTaskToReadyList+0xbc>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	429a      	cmp	r2, r3
 800433a:	d802      	bhi.n	8004342 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800433c:	4a1c      	ldr	r2, [pc, #112]	; (80043b0 <prvAddNewTaskToReadyList+0xbc>)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004342:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <prvAddNewTaskToReadyList+0xc4>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3301      	adds	r3, #1
 8004348:	4a1b      	ldr	r2, [pc, #108]	; (80043b8 <prvAddNewTaskToReadyList+0xc4>)
 800434a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	2201      	movs	r2, #1
 8004352:	409a      	lsls	r2, r3
 8004354:	4b19      	ldr	r3, [pc, #100]	; (80043bc <prvAddNewTaskToReadyList+0xc8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4313      	orrs	r3, r2
 800435a:	4a18      	ldr	r2, [pc, #96]	; (80043bc <prvAddNewTaskToReadyList+0xc8>)
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4a15      	ldr	r2, [pc, #84]	; (80043c0 <prvAddNewTaskToReadyList+0xcc>)
 800436c:	441a      	add	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3304      	adds	r3, #4
 8004372:	4619      	mov	r1, r3
 8004374:	4610      	mov	r0, r2
 8004376:	f7ff fe18 	bl	8003faa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800437a:	f000 fcdf 	bl	8004d3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800437e:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <prvAddNewTaskToReadyList+0xc0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00e      	beq.n	80043a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004386:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <prvAddNewTaskToReadyList+0xbc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	429a      	cmp	r2, r3
 8004392:	d207      	bcs.n	80043a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004394:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <prvAddNewTaskToReadyList+0xd0>)
 8004396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20000778 	.word	0x20000778
 80043b0:	20000678 	.word	0x20000678
 80043b4:	20000784 	.word	0x20000784
 80043b8:	20000794 	.word	0x20000794
 80043bc:	20000780 	.word	0x20000780
 80043c0:	2000067c 	.word	0x2000067c
 80043c4:	e000ed04 	.word	0xe000ed04

080043c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d017      	beq.n	800440a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043da:	4b13      	ldr	r3, [pc, #76]	; (8004428 <vTaskDelay+0x60>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <vTaskDelay+0x30>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	60bb      	str	r3, [r7, #8]
}
 80043f4:	bf00      	nop
 80043f6:	e7fe      	b.n	80043f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043f8:	f000 f87a 	bl	80044f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043fc:	2100      	movs	r1, #0
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fb12 	bl	8004a28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004404:	f000 f882 	bl	800450c <xTaskResumeAll>
 8004408:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d107      	bne.n	8004420 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004410:	4b06      	ldr	r3, [pc, #24]	; (800442c <vTaskDelay+0x64>)
 8004412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	200007a0 	.word	0x200007a0
 800442c:	e000ed04 	.word	0xe000ed04

08004430 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08a      	sub	sp, #40	; 0x28
 8004434:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004436:	2300      	movs	r3, #0
 8004438:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800443a:	2300      	movs	r3, #0
 800443c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800443e:	463a      	mov	r2, r7
 8004440:	1d39      	adds	r1, r7, #4
 8004442:	f107 0308 	add.w	r3, r7, #8
 8004446:	4618      	mov	r0, r3
 8004448:	f7fc ff9e 	bl	8001388 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800444c:	6839      	ldr	r1, [r7, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	9202      	str	r2, [sp, #8]
 8004454:	9301      	str	r3, [sp, #4]
 8004456:	2300      	movs	r3, #0
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	2300      	movs	r3, #0
 800445c:	460a      	mov	r2, r1
 800445e:	491e      	ldr	r1, [pc, #120]	; (80044d8 <vTaskStartScheduler+0xa8>)
 8004460:	481e      	ldr	r0, [pc, #120]	; (80044dc <vTaskStartScheduler+0xac>)
 8004462:	f7ff fe26 	bl	80040b2 <xTaskCreateStatic>
 8004466:	4603      	mov	r3, r0
 8004468:	4a1d      	ldr	r2, [pc, #116]	; (80044e0 <vTaskStartScheduler+0xb0>)
 800446a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800446c:	4b1c      	ldr	r3, [pc, #112]	; (80044e0 <vTaskStartScheduler+0xb0>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004474:	2301      	movs	r3, #1
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	e001      	b.n	800447e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800447a:	2300      	movs	r3, #0
 800447c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d116      	bne.n	80044b2 <vTaskStartScheduler+0x82>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	613b      	str	r3, [r7, #16]
}
 8004496:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004498:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <vTaskStartScheduler+0xb4>)
 800449a:	f04f 32ff 	mov.w	r2, #4294967295
 800449e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044a0:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <vTaskStartScheduler+0xb8>)
 80044a2:	2201      	movs	r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80044a6:	4b11      	ldr	r3, [pc, #68]	; (80044ec <vTaskStartScheduler+0xbc>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044ac:	f000 fba4 	bl	8004bf8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044b0:	e00e      	b.n	80044d0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b8:	d10a      	bne.n	80044d0 <vTaskStartScheduler+0xa0>
	__asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	60fb      	str	r3, [r7, #12]
}
 80044cc:	bf00      	nop
 80044ce:	e7fe      	b.n	80044ce <vTaskStartScheduler+0x9e>
}
 80044d0:	bf00      	nop
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	080052fc 	.word	0x080052fc
 80044dc:	08004875 	.word	0x08004875
 80044e0:	2000079c 	.word	0x2000079c
 80044e4:	20000798 	.word	0x20000798
 80044e8:	20000784 	.word	0x20000784
 80044ec:	2000077c 	.word	0x2000077c

080044f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80044f4:	4b04      	ldr	r3, [pc, #16]	; (8004508 <vTaskSuspendAll+0x18>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3301      	adds	r3, #1
 80044fa:	4a03      	ldr	r2, [pc, #12]	; (8004508 <vTaskSuspendAll+0x18>)
 80044fc:	6013      	str	r3, [r2, #0]
}
 80044fe:	bf00      	nop
 8004500:	46bd      	mov	sp, r7
 8004502:	bc80      	pop	{r7}
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	200007a0 	.word	0x200007a0

0800450c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004516:	2300      	movs	r3, #0
 8004518:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800451a:	4b41      	ldr	r3, [pc, #260]	; (8004620 <xTaskResumeAll+0x114>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10a      	bne.n	8004538 <xTaskResumeAll+0x2c>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	603b      	str	r3, [r7, #0]
}
 8004534:	bf00      	nop
 8004536:	e7fe      	b.n	8004536 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004538:	f000 fbd0 	bl	8004cdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800453c:	4b38      	ldr	r3, [pc, #224]	; (8004620 <xTaskResumeAll+0x114>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3b01      	subs	r3, #1
 8004542:	4a37      	ldr	r2, [pc, #220]	; (8004620 <xTaskResumeAll+0x114>)
 8004544:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004546:	4b36      	ldr	r3, [pc, #216]	; (8004620 <xTaskResumeAll+0x114>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d161      	bne.n	8004612 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800454e:	4b35      	ldr	r3, [pc, #212]	; (8004624 <xTaskResumeAll+0x118>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d05d      	beq.n	8004612 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004556:	e02e      	b.n	80045b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004558:	4b33      	ldr	r3, [pc, #204]	; (8004628 <xTaskResumeAll+0x11c>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	3318      	adds	r3, #24
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff fd7b 	bl	8004060 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3304      	adds	r3, #4
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff fd76 	bl	8004060 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	2201      	movs	r2, #1
 800457a:	409a      	lsls	r2, r3
 800457c:	4b2b      	ldr	r3, [pc, #172]	; (800462c <xTaskResumeAll+0x120>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4313      	orrs	r3, r2
 8004582:	4a2a      	ldr	r2, [pc, #168]	; (800462c <xTaskResumeAll+0x120>)
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458a:	4613      	mov	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4a27      	ldr	r2, [pc, #156]	; (8004630 <xTaskResumeAll+0x124>)
 8004594:	441a      	add	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3304      	adds	r3, #4
 800459a:	4619      	mov	r1, r3
 800459c:	4610      	mov	r0, r2
 800459e:	f7ff fd04 	bl	8003faa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a6:	4b23      	ldr	r3, [pc, #140]	; (8004634 <xTaskResumeAll+0x128>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d302      	bcc.n	80045b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80045b0:	4b21      	ldr	r3, [pc, #132]	; (8004638 <xTaskResumeAll+0x12c>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045b6:	4b1c      	ldr	r3, [pc, #112]	; (8004628 <xTaskResumeAll+0x11c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1cc      	bne.n	8004558 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045c4:	f000 fa0c 	bl	80049e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80045c8:	4b1c      	ldr	r3, [pc, #112]	; (800463c <xTaskResumeAll+0x130>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d010      	beq.n	80045f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045d4:	f000 f836 	bl	8004644 <xTaskIncrementTick>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80045de:	4b16      	ldr	r3, [pc, #88]	; (8004638 <xTaskResumeAll+0x12c>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1f1      	bne.n	80045d4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80045f0:	4b12      	ldr	r3, [pc, #72]	; (800463c <xTaskResumeAll+0x130>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045f6:	4b10      	ldr	r3, [pc, #64]	; (8004638 <xTaskResumeAll+0x12c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d009      	beq.n	8004612 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045fe:	2301      	movs	r3, #1
 8004600:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004602:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <xTaskResumeAll+0x134>)
 8004604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004612:	f000 fb93 	bl	8004d3c <vPortExitCritical>

	return xAlreadyYielded;
 8004616:	68bb      	ldr	r3, [r7, #8]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	200007a0 	.word	0x200007a0
 8004624:	20000778 	.word	0x20000778
 8004628:	20000738 	.word	0x20000738
 800462c:	20000780 	.word	0x20000780
 8004630:	2000067c 	.word	0x2000067c
 8004634:	20000678 	.word	0x20000678
 8004638:	2000078c 	.word	0x2000078c
 800463c:	20000788 	.word	0x20000788
 8004640:	e000ed04 	.word	0xe000ed04

08004644 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800464a:	2300      	movs	r3, #0
 800464c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800464e:	4b51      	ldr	r3, [pc, #324]	; (8004794 <xTaskIncrementTick+0x150>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	f040 808d 	bne.w	8004772 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004658:	4b4f      	ldr	r3, [pc, #316]	; (8004798 <xTaskIncrementTick+0x154>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3301      	adds	r3, #1
 800465e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004660:	4a4d      	ldr	r2, [pc, #308]	; (8004798 <xTaskIncrementTick+0x154>)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d120      	bne.n	80046ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800466c:	4b4b      	ldr	r3, [pc, #300]	; (800479c <xTaskIncrementTick+0x158>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <xTaskIncrementTick+0x48>
	__asm volatile
 8004676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	603b      	str	r3, [r7, #0]
}
 8004688:	bf00      	nop
 800468a:	e7fe      	b.n	800468a <xTaskIncrementTick+0x46>
 800468c:	4b43      	ldr	r3, [pc, #268]	; (800479c <xTaskIncrementTick+0x158>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	4b43      	ldr	r3, [pc, #268]	; (80047a0 <xTaskIncrementTick+0x15c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a41      	ldr	r2, [pc, #260]	; (800479c <xTaskIncrementTick+0x158>)
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	4a41      	ldr	r2, [pc, #260]	; (80047a0 <xTaskIncrementTick+0x15c>)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6013      	str	r3, [r2, #0]
 80046a0:	4b40      	ldr	r3, [pc, #256]	; (80047a4 <xTaskIncrementTick+0x160>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3301      	adds	r3, #1
 80046a6:	4a3f      	ldr	r2, [pc, #252]	; (80047a4 <xTaskIncrementTick+0x160>)
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	f000 f999 	bl	80049e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046ae:	4b3e      	ldr	r3, [pc, #248]	; (80047a8 <xTaskIncrementTick+0x164>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d34d      	bcc.n	8004754 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046b8:	4b38      	ldr	r3, [pc, #224]	; (800479c <xTaskIncrementTick+0x158>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <xTaskIncrementTick+0x82>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <xTaskIncrementTick+0x84>
 80046c6:	2300      	movs	r3, #0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d004      	beq.n	80046d6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046cc:	4b36      	ldr	r3, [pc, #216]	; (80047a8 <xTaskIncrementTick+0x164>)
 80046ce:	f04f 32ff 	mov.w	r2, #4294967295
 80046d2:	601a      	str	r2, [r3, #0]
					break;
 80046d4:	e03e      	b.n	8004754 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046d6:	4b31      	ldr	r3, [pc, #196]	; (800479c <xTaskIncrementTick+0x158>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d203      	bcs.n	80046f6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046ee:	4a2e      	ldr	r2, [pc, #184]	; (80047a8 <xTaskIncrementTick+0x164>)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6013      	str	r3, [r2, #0]
						break;
 80046f4:	e02e      	b.n	8004754 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	3304      	adds	r3, #4
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff fcb0 	bl	8004060 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004704:	2b00      	cmp	r3, #0
 8004706:	d004      	beq.n	8004712 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	3318      	adds	r3, #24
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff fca7 	bl	8004060 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	2201      	movs	r2, #1
 8004718:	409a      	lsls	r2, r3
 800471a:	4b24      	ldr	r3, [pc, #144]	; (80047ac <xTaskIncrementTick+0x168>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4313      	orrs	r3, r2
 8004720:	4a22      	ldr	r2, [pc, #136]	; (80047ac <xTaskIncrementTick+0x168>)
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4a1f      	ldr	r2, [pc, #124]	; (80047b0 <xTaskIncrementTick+0x16c>)
 8004732:	441a      	add	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	3304      	adds	r3, #4
 8004738:	4619      	mov	r1, r3
 800473a:	4610      	mov	r0, r2
 800473c:	f7ff fc35 	bl	8003faa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004744:	4b1b      	ldr	r3, [pc, #108]	; (80047b4 <xTaskIncrementTick+0x170>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	429a      	cmp	r2, r3
 800474c:	d3b4      	bcc.n	80046b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800474e:	2301      	movs	r3, #1
 8004750:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004752:	e7b1      	b.n	80046b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004754:	4b17      	ldr	r3, [pc, #92]	; (80047b4 <xTaskIncrementTick+0x170>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475a:	4915      	ldr	r1, [pc, #84]	; (80047b0 <xTaskIncrementTick+0x16c>)
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d907      	bls.n	800477c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800476c:	2301      	movs	r3, #1
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	e004      	b.n	800477c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004772:	4b11      	ldr	r3, [pc, #68]	; (80047b8 <xTaskIncrementTick+0x174>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3301      	adds	r3, #1
 8004778:	4a0f      	ldr	r2, [pc, #60]	; (80047b8 <xTaskIncrementTick+0x174>)
 800477a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800477c:	4b0f      	ldr	r3, [pc, #60]	; (80047bc <xTaskIncrementTick+0x178>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004784:	2301      	movs	r3, #1
 8004786:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004788:	697b      	ldr	r3, [r7, #20]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	200007a0 	.word	0x200007a0
 8004798:	2000077c 	.word	0x2000077c
 800479c:	20000730 	.word	0x20000730
 80047a0:	20000734 	.word	0x20000734
 80047a4:	20000790 	.word	0x20000790
 80047a8:	20000798 	.word	0x20000798
 80047ac:	20000780 	.word	0x20000780
 80047b0:	2000067c 	.word	0x2000067c
 80047b4:	20000678 	.word	0x20000678
 80047b8:	20000788 	.word	0x20000788
 80047bc:	2000078c 	.word	0x2000078c

080047c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047c6:	4b26      	ldr	r3, [pc, #152]	; (8004860 <vTaskSwitchContext+0xa0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047ce:	4b25      	ldr	r3, [pc, #148]	; (8004864 <vTaskSwitchContext+0xa4>)
 80047d0:	2201      	movs	r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047d4:	e03f      	b.n	8004856 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80047d6:	4b23      	ldr	r3, [pc, #140]	; (8004864 <vTaskSwitchContext+0xa4>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80047dc:	4b22      	ldr	r3, [pc, #136]	; (8004868 <vTaskSwitchContext+0xa8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	fab3 f383 	clz	r3, r3
 80047e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80047ea:	7afb      	ldrb	r3, [r7, #11]
 80047ec:	f1c3 031f 	rsb	r3, r3, #31
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	491e      	ldr	r1, [pc, #120]	; (800486c <vTaskSwitchContext+0xac>)
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	4613      	mov	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10a      	bne.n	800481c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	607b      	str	r3, [r7, #4]
}
 8004818:	bf00      	nop
 800481a:	e7fe      	b.n	800481a <vTaskSwitchContext+0x5a>
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4a11      	ldr	r2, [pc, #68]	; (800486c <vTaskSwitchContext+0xac>)
 8004828:	4413      	add	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	605a      	str	r2, [r3, #4]
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	3308      	adds	r3, #8
 800483e:	429a      	cmp	r2, r3
 8004840:	d104      	bne.n	800484c <vTaskSwitchContext+0x8c>
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	605a      	str	r2, [r3, #4]
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	4a07      	ldr	r2, [pc, #28]	; (8004870 <vTaskSwitchContext+0xb0>)
 8004854:	6013      	str	r3, [r2, #0]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr
 8004860:	200007a0 	.word	0x200007a0
 8004864:	2000078c 	.word	0x2000078c
 8004868:	20000780 	.word	0x20000780
 800486c:	2000067c 	.word	0x2000067c
 8004870:	20000678 	.word	0x20000678

08004874 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800487c:	f000 f852 	bl	8004924 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004880:	4b06      	ldr	r3, [pc, #24]	; (800489c <prvIdleTask+0x28>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d9f9      	bls.n	800487c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004888:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <prvIdleTask+0x2c>)
 800488a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004898:	e7f0      	b.n	800487c <prvIdleTask+0x8>
 800489a:	bf00      	nop
 800489c:	2000067c 	.word	0x2000067c
 80048a0:	e000ed04 	.word	0xe000ed04

080048a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048aa:	2300      	movs	r3, #0
 80048ac:	607b      	str	r3, [r7, #4]
 80048ae:	e00c      	b.n	80048ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4a12      	ldr	r2, [pc, #72]	; (8004904 <prvInitialiseTaskLists+0x60>)
 80048bc:	4413      	add	r3, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff fb48 	bl	8003f54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3301      	adds	r3, #1
 80048c8:	607b      	str	r3, [r7, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b06      	cmp	r3, #6
 80048ce:	d9ef      	bls.n	80048b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048d0:	480d      	ldr	r0, [pc, #52]	; (8004908 <prvInitialiseTaskLists+0x64>)
 80048d2:	f7ff fb3f 	bl	8003f54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048d6:	480d      	ldr	r0, [pc, #52]	; (800490c <prvInitialiseTaskLists+0x68>)
 80048d8:	f7ff fb3c 	bl	8003f54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048dc:	480c      	ldr	r0, [pc, #48]	; (8004910 <prvInitialiseTaskLists+0x6c>)
 80048de:	f7ff fb39 	bl	8003f54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048e2:	480c      	ldr	r0, [pc, #48]	; (8004914 <prvInitialiseTaskLists+0x70>)
 80048e4:	f7ff fb36 	bl	8003f54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048e8:	480b      	ldr	r0, [pc, #44]	; (8004918 <prvInitialiseTaskLists+0x74>)
 80048ea:	f7ff fb33 	bl	8003f54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80048ee:	4b0b      	ldr	r3, [pc, #44]	; (800491c <prvInitialiseTaskLists+0x78>)
 80048f0:	4a05      	ldr	r2, [pc, #20]	; (8004908 <prvInitialiseTaskLists+0x64>)
 80048f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048f4:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <prvInitialiseTaskLists+0x7c>)
 80048f6:	4a05      	ldr	r2, [pc, #20]	; (800490c <prvInitialiseTaskLists+0x68>)
 80048f8:	601a      	str	r2, [r3, #0]
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	2000067c 	.word	0x2000067c
 8004908:	20000708 	.word	0x20000708
 800490c:	2000071c 	.word	0x2000071c
 8004910:	20000738 	.word	0x20000738
 8004914:	2000074c 	.word	0x2000074c
 8004918:	20000764 	.word	0x20000764
 800491c:	20000730 	.word	0x20000730
 8004920:	20000734 	.word	0x20000734

08004924 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800492a:	e019      	b.n	8004960 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800492c:	f000 f9d6 	bl	8004cdc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004930:	4b10      	ldr	r3, [pc, #64]	; (8004974 <prvCheckTasksWaitingTermination+0x50>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff fb8f 	bl	8004060 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004942:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <prvCheckTasksWaitingTermination+0x54>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3b01      	subs	r3, #1
 8004948:	4a0b      	ldr	r2, [pc, #44]	; (8004978 <prvCheckTasksWaitingTermination+0x54>)
 800494a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800494c:	4b0b      	ldr	r3, [pc, #44]	; (800497c <prvCheckTasksWaitingTermination+0x58>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3b01      	subs	r3, #1
 8004952:	4a0a      	ldr	r2, [pc, #40]	; (800497c <prvCheckTasksWaitingTermination+0x58>)
 8004954:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004956:	f000 f9f1 	bl	8004d3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f810 	bl	8004980 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <prvCheckTasksWaitingTermination+0x58>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e1      	bne.n	800492c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004968:	bf00      	nop
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	2000074c 	.word	0x2000074c
 8004978:	20000778 	.word	0x20000778
 800497c:	20000760 	.word	0x20000760

08004980 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800498e:	2b00      	cmp	r3, #0
 8004990:	d108      	bne.n	80049a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fb26 	bl	8004fe8 <vPortFree>
				vPortFree( pxTCB );
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fb23 	bl	8004fe8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049a2:	e018      	b.n	80049d6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d103      	bne.n	80049b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fb1a 	bl	8004fe8 <vPortFree>
	}
 80049b4:	e00f      	b.n	80049d6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d00a      	beq.n	80049d6 <prvDeleteTCB+0x56>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	60fb      	str	r3, [r7, #12]
}
 80049d2:	bf00      	nop
 80049d4:	e7fe      	b.n	80049d4 <prvDeleteTCB+0x54>
	}
 80049d6:	bf00      	nop
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049e6:	4b0e      	ldr	r3, [pc, #56]	; (8004a20 <prvResetNextTaskUnblockTime+0x40>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <prvResetNextTaskUnblockTime+0x14>
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <prvResetNextTaskUnblockTime+0x16>
 80049f4:	2300      	movs	r3, #0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d004      	beq.n	8004a04 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049fa:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <prvResetNextTaskUnblockTime+0x44>)
 80049fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004a00:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a02:	e008      	b.n	8004a16 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a04:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <prvResetNextTaskUnblockTime+0x40>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	4a04      	ldr	r2, [pc, #16]	; (8004a24 <prvResetNextTaskUnblockTime+0x44>)
 8004a14:	6013      	str	r3, [r2, #0]
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr
 8004a20:	20000730 	.word	0x20000730
 8004a24:	20000798 	.word	0x20000798

08004a28 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a32:	4b29      	ldr	r3, [pc, #164]	; (8004ad8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a38:	4b28      	ldr	r3, [pc, #160]	; (8004adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff fb0e 	bl	8004060 <uxListRemove>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10b      	bne.n	8004a62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004a4a:	4b24      	ldr	r3, [pc, #144]	; (8004adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	2201      	movs	r2, #1
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43da      	mvns	r2, r3
 8004a58:	4b21      	ldr	r3, [pc, #132]	; (8004ae0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	4a20      	ldr	r2, [pc, #128]	; (8004ae0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a68:	d10a      	bne.n	8004a80 <prvAddCurrentTaskToDelayedList+0x58>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a70:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3304      	adds	r3, #4
 8004a76:	4619      	mov	r1, r3
 8004a78:	481a      	ldr	r0, [pc, #104]	; (8004ae4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a7a:	f7ff fa96 	bl	8003faa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a7e:	e026      	b.n	8004ace <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4413      	add	r3, r2
 8004a86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a88:	4b14      	ldr	r3, [pc, #80]	; (8004adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d209      	bcs.n	8004aac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a98:	4b13      	ldr	r3, [pc, #76]	; (8004ae8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	f7ff faa3 	bl	8003ff0 <vListInsert>
}
 8004aaa:	e010      	b.n	8004ace <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aac:	4b0f      	ldr	r3, [pc, #60]	; (8004aec <prvAddCurrentTaskToDelayedList+0xc4>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4610      	mov	r0, r2
 8004aba:	f7ff fa99 	bl	8003ff0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004abe:	4b0c      	ldr	r3, [pc, #48]	; (8004af0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d202      	bcs.n	8004ace <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ac8:	4a09      	ldr	r2, [pc, #36]	; (8004af0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	6013      	str	r3, [r2, #0]
}
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	2000077c 	.word	0x2000077c
 8004adc:	20000678 	.word	0x20000678
 8004ae0:	20000780 	.word	0x20000780
 8004ae4:	20000764 	.word	0x20000764
 8004ae8:	20000734 	.word	0x20000734
 8004aec:	20000730 	.word	0x20000730
 8004af0:	20000798 	.word	0x20000798

08004af4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3b04      	subs	r3, #4
 8004b04:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3b04      	subs	r3, #4
 8004b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f023 0201 	bic.w	r2, r3, #1
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3b04      	subs	r3, #4
 8004b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b24:	4a08      	ldr	r2, [pc, #32]	; (8004b48 <pxPortInitialiseStack+0x54>)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3b14      	subs	r3, #20
 8004b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3b20      	subs	r3, #32
 8004b3a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr
 8004b48:	08004b4d 	.word	0x08004b4d

08004b4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b56:	4b12      	ldr	r3, [pc, #72]	; (8004ba0 <prvTaskExitError+0x54>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5e:	d00a      	beq.n	8004b76 <prvTaskExitError+0x2a>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	60fb      	str	r3, [r7, #12]
}
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <prvTaskExitError+0x28>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	60bb      	str	r3, [r7, #8]
}
 8004b88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b8a:	bf00      	nop
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0fc      	beq.n	8004b8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b92:	bf00      	nop
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc80      	pop	{r7}
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	20000010 	.word	0x20000010
	...

08004bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004bb0:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <pxCurrentTCBConst2>)
 8004bb2:	6819      	ldr	r1, [r3, #0]
 8004bb4:	6808      	ldr	r0, [r1, #0]
 8004bb6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004bba:	f380 8809 	msr	PSP, r0
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f04f 0000 	mov.w	r0, #0
 8004bc6:	f380 8811 	msr	BASEPRI, r0
 8004bca:	f04e 0e0d 	orr.w	lr, lr, #13
 8004bce:	4770      	bx	lr

08004bd0 <pxCurrentTCBConst2>:
 8004bd0:	20000678 	.word	0x20000678
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004bd4:	bf00      	nop
 8004bd6:	bf00      	nop

08004bd8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004bd8:	4806      	ldr	r0, [pc, #24]	; (8004bf4 <prvPortStartFirstTask+0x1c>)
 8004bda:	6800      	ldr	r0, [r0, #0]
 8004bdc:	6800      	ldr	r0, [r0, #0]
 8004bde:	f380 8808 	msr	MSP, r0
 8004be2:	b662      	cpsie	i
 8004be4:	b661      	cpsie	f
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	df00      	svc	0
 8004bf0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bf2:	bf00      	nop
 8004bf4:	e000ed08 	.word	0xe000ed08

08004bf8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bfe:	4b32      	ldr	r3, [pc, #200]	; (8004cc8 <xPortStartScheduler+0xd0>)
 8004c00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	22ff      	movs	r2, #255	; 0xff
 8004c0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	4b2a      	ldr	r3, [pc, #168]	; (8004ccc <xPortStartScheduler+0xd4>)
 8004c24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c26:	4b2a      	ldr	r3, [pc, #168]	; (8004cd0 <xPortStartScheduler+0xd8>)
 8004c28:	2207      	movs	r2, #7
 8004c2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c2c:	e009      	b.n	8004c42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004c2e:	4b28      	ldr	r3, [pc, #160]	; (8004cd0 <xPortStartScheduler+0xd8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	4a26      	ldr	r2, [pc, #152]	; (8004cd0 <xPortStartScheduler+0xd8>)
 8004c36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4a:	2b80      	cmp	r3, #128	; 0x80
 8004c4c:	d0ef      	beq.n	8004c2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c4e:	4b20      	ldr	r3, [pc, #128]	; (8004cd0 <xPortStartScheduler+0xd8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f1c3 0307 	rsb	r3, r3, #7
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d00a      	beq.n	8004c70 <xPortStartScheduler+0x78>
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	60bb      	str	r3, [r7, #8]
}
 8004c6c:	bf00      	nop
 8004c6e:	e7fe      	b.n	8004c6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c70:	4b17      	ldr	r3, [pc, #92]	; (8004cd0 <xPortStartScheduler+0xd8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	4a16      	ldr	r2, [pc, #88]	; (8004cd0 <xPortStartScheduler+0xd8>)
 8004c78:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c7a:	4b15      	ldr	r3, [pc, #84]	; (8004cd0 <xPortStartScheduler+0xd8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c82:	4a13      	ldr	r2, [pc, #76]	; (8004cd0 <xPortStartScheduler+0xd8>)
 8004c84:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c8e:	4b11      	ldr	r3, [pc, #68]	; (8004cd4 <xPortStartScheduler+0xdc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a10      	ldr	r2, [pc, #64]	; (8004cd4 <xPortStartScheduler+0xdc>)
 8004c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c9a:	4b0e      	ldr	r3, [pc, #56]	; (8004cd4 <xPortStartScheduler+0xdc>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a0d      	ldr	r2, [pc, #52]	; (8004cd4 <xPortStartScheduler+0xdc>)
 8004ca0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ca4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ca6:	f000 f8b9 	bl	8004e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004caa:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <xPortStartScheduler+0xe0>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cb0:	f7ff ff92 	bl	8004bd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004cb4:	f7ff fd84 	bl	80047c0 <vTaskSwitchContext>
	prvTaskExitError();
 8004cb8:	f7ff ff48 	bl	8004b4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	e000e400 	.word	0xe000e400
 8004ccc:	200007a4 	.word	0x200007a4
 8004cd0:	200007a8 	.word	0x200007a8
 8004cd4:	e000ed20 	.word	0xe000ed20
 8004cd8:	20000010 	.word	0x20000010

08004cdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	607b      	str	r3, [r7, #4]
}
 8004cf4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004cf6:	4b0f      	ldr	r3, [pc, #60]	; (8004d34 <vPortEnterCritical+0x58>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	4a0d      	ldr	r2, [pc, #52]	; (8004d34 <vPortEnterCritical+0x58>)
 8004cfe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d00:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <vPortEnterCritical+0x58>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d10f      	bne.n	8004d28 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d08:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <vPortEnterCritical+0x5c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	603b      	str	r3, [r7, #0]
}
 8004d24:	bf00      	nop
 8004d26:	e7fe      	b.n	8004d26 <vPortEnterCritical+0x4a>
	}
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bc80      	pop	{r7}
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	20000010 	.word	0x20000010
 8004d38:	e000ed04 	.word	0xe000ed04

08004d3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d42:	4b11      	ldr	r3, [pc, #68]	; (8004d88 <vPortExitCritical+0x4c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10a      	bne.n	8004d60 <vPortExitCritical+0x24>
	__asm volatile
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	607b      	str	r3, [r7, #4]
}
 8004d5c:	bf00      	nop
 8004d5e:	e7fe      	b.n	8004d5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d60:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <vPortExitCritical+0x4c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	4a08      	ldr	r2, [pc, #32]	; (8004d88 <vPortExitCritical+0x4c>)
 8004d68:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d6a:	4b07      	ldr	r3, [pc, #28]	; (8004d88 <vPortExitCritical+0x4c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d105      	bne.n	8004d7e <vPortExitCritical+0x42>
 8004d72:	2300      	movs	r3, #0
 8004d74:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d7c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr
 8004d88:	20000010 	.word	0x20000010
 8004d8c:	00000000 	.word	0x00000000

08004d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d90:	f3ef 8009 	mrs	r0, PSP
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	4b0d      	ldr	r3, [pc, #52]	; (8004dd0 <pxCurrentTCBConst>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004da0:	6010      	str	r0, [r2, #0]
 8004da2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004da6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004daa:	f380 8811 	msr	BASEPRI, r0
 8004dae:	f7ff fd07 	bl	80047c0 <vTaskSwitchContext>
 8004db2:	f04f 0000 	mov.w	r0, #0
 8004db6:	f380 8811 	msr	BASEPRI, r0
 8004dba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004dbe:	6819      	ldr	r1, [r3, #0]
 8004dc0:	6808      	ldr	r0, [r1, #0]
 8004dc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004dc6:	f380 8809 	msr	PSP, r0
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	4770      	bx	lr

08004dd0 <pxCurrentTCBConst>:
 8004dd0:	20000678 	.word	0x20000678
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop

08004dd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	607b      	str	r3, [r7, #4]
}
 8004df0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004df2:	f7ff fc27 	bl	8004644 <xTaskIncrementTick>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004dfc:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <SysTick_Handler+0x40>)
 8004dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	2300      	movs	r3, #0
 8004e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f383 8811 	msr	BASEPRI, r3
}
 8004e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e10:	bf00      	nop
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	e000ed04 	.word	0xe000ed04

08004e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e20:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <vPortSetupTimerInterrupt+0x30>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e26:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <vPortSetupTimerInterrupt+0x34>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e2c:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <vPortSetupTimerInterrupt+0x38>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a09      	ldr	r2, [pc, #36]	; (8004e58 <vPortSetupTimerInterrupt+0x3c>)
 8004e32:	fba2 2303 	umull	r2, r3, r2, r3
 8004e36:	099b      	lsrs	r3, r3, #6
 8004e38:	4a08      	ldr	r2, [pc, #32]	; (8004e5c <vPortSetupTimerInterrupt+0x40>)
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e3e:	4b03      	ldr	r3, [pc, #12]	; (8004e4c <vPortSetupTimerInterrupt+0x30>)
 8004e40:	2207      	movs	r2, #7
 8004e42:	601a      	str	r2, [r3, #0]
}
 8004e44:	bf00      	nop
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr
 8004e4c:	e000e010 	.word	0xe000e010
 8004e50:	e000e018 	.word	0xe000e018
 8004e54:	20000004 	.word	0x20000004
 8004e58:	10624dd3 	.word	0x10624dd3
 8004e5c:	e000e014 	.word	0xe000e014

08004e60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08a      	sub	sp, #40	; 0x28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e6c:	f7ff fb40 	bl	80044f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e70:	4b58      	ldr	r3, [pc, #352]	; (8004fd4 <pvPortMalloc+0x174>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e78:	f000 f910 	bl	800509c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e7c:	4b56      	ldr	r3, [pc, #344]	; (8004fd8 <pvPortMalloc+0x178>)
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4013      	ands	r3, r2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f040 808e 	bne.w	8004fa6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01d      	beq.n	8004ecc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e90:	2208      	movs	r2, #8
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4413      	add	r3, r2
 8004e96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d014      	beq.n	8004ecc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f023 0307 	bic.w	r3, r3, #7
 8004ea8:	3308      	adds	r3, #8
 8004eaa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <pvPortMalloc+0x6c>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	617b      	str	r3, [r7, #20]
}
 8004ec8:	bf00      	nop
 8004eca:	e7fe      	b.n	8004eca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d069      	beq.n	8004fa6 <pvPortMalloc+0x146>
 8004ed2:	4b42      	ldr	r3, [pc, #264]	; (8004fdc <pvPortMalloc+0x17c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d864      	bhi.n	8004fa6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004edc:	4b40      	ldr	r3, [pc, #256]	; (8004fe0 <pvPortMalloc+0x180>)
 8004ede:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ee0:	4b3f      	ldr	r3, [pc, #252]	; (8004fe0 <pvPortMalloc+0x180>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ee6:	e004      	b.n	8004ef2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d903      	bls.n	8004f04 <pvPortMalloc+0xa4>
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1f1      	bne.n	8004ee8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f04:	4b33      	ldr	r3, [pc, #204]	; (8004fd4 <pvPortMalloc+0x174>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d04b      	beq.n	8004fa6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2208      	movs	r2, #8
 8004f14:	4413      	add	r3, r2
 8004f16:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	1ad2      	subs	r2, r2, r3
 8004f28:	2308      	movs	r3, #8
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d91f      	bls.n	8004f70 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4413      	add	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <pvPortMalloc+0xf8>
	__asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	613b      	str	r3, [r7, #16]
}
 8004f54:	bf00      	nop
 8004f56:	e7fe      	b.n	8004f56 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	1ad2      	subs	r2, r2, r3
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f6a:	69b8      	ldr	r0, [r7, #24]
 8004f6c:	f000 f8f8 	bl	8005160 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f70:	4b1a      	ldr	r3, [pc, #104]	; (8004fdc <pvPortMalloc+0x17c>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	4a18      	ldr	r2, [pc, #96]	; (8004fdc <pvPortMalloc+0x17c>)
 8004f7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f7e:	4b17      	ldr	r3, [pc, #92]	; (8004fdc <pvPortMalloc+0x17c>)
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	4b18      	ldr	r3, [pc, #96]	; (8004fe4 <pvPortMalloc+0x184>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d203      	bcs.n	8004f92 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f8a:	4b14      	ldr	r3, [pc, #80]	; (8004fdc <pvPortMalloc+0x17c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a15      	ldr	r2, [pc, #84]	; (8004fe4 <pvPortMalloc+0x184>)
 8004f90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	4b10      	ldr	r3, [pc, #64]	; (8004fd8 <pvPortMalloc+0x178>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004fa6:	f7ff fab1 	bl	800450c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <pvPortMalloc+0x16a>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	60fb      	str	r3, [r7, #12]
}
 8004fc6:	bf00      	nop
 8004fc8:	e7fe      	b.n	8004fc8 <pvPortMalloc+0x168>
	return pvReturn;
 8004fca:	69fb      	ldr	r3, [r7, #28]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3728      	adds	r7, #40	; 0x28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	200013b4 	.word	0x200013b4
 8004fd8:	200013c0 	.word	0x200013c0
 8004fdc:	200013b8 	.word	0x200013b8
 8004fe0:	200013ac 	.word	0x200013ac
 8004fe4:	200013bc 	.word	0x200013bc

08004fe8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d048      	beq.n	800508c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ffa:	2308      	movs	r3, #8
 8004ffc:	425b      	negs	r3, r3
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4413      	add	r3, r2
 8005002:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	4b21      	ldr	r3, [pc, #132]	; (8005094 <vPortFree+0xac>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4013      	ands	r3, r2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10a      	bne.n	800502c <vPortFree+0x44>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	60fb      	str	r3, [r7, #12]
}
 8005028:	bf00      	nop
 800502a:	e7fe      	b.n	800502a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <vPortFree+0x62>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	60bb      	str	r3, [r7, #8]
}
 8005046:	bf00      	nop
 8005048:	e7fe      	b.n	8005048 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	4b11      	ldr	r3, [pc, #68]	; (8005094 <vPortFree+0xac>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4013      	ands	r3, r2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d019      	beq.n	800508c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d115      	bne.n	800508c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <vPortFree+0xac>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	43db      	mvns	r3, r3
 800506a:	401a      	ands	r2, r3
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005070:	f7ff fa3e 	bl	80044f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	4b07      	ldr	r3, [pc, #28]	; (8005098 <vPortFree+0xb0>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4413      	add	r3, r2
 800507e:	4a06      	ldr	r2, [pc, #24]	; (8005098 <vPortFree+0xb0>)
 8005080:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005082:	6938      	ldr	r0, [r7, #16]
 8005084:	f000 f86c 	bl	8005160 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005088:	f7ff fa40 	bl	800450c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800508c:	bf00      	nop
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	200013c0 	.word	0x200013c0
 8005098:	200013b8 	.word	0x200013b8

0800509c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80050a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050a8:	4b27      	ldr	r3, [pc, #156]	; (8005148 <prvHeapInit+0xac>)
 80050aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00c      	beq.n	80050d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3307      	adds	r3, #7
 80050ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0307 	bic.w	r3, r3, #7
 80050c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	4a1f      	ldr	r2, [pc, #124]	; (8005148 <prvHeapInit+0xac>)
 80050cc:	4413      	add	r3, r2
 80050ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050d4:	4a1d      	ldr	r2, [pc, #116]	; (800514c <prvHeapInit+0xb0>)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050da:	4b1c      	ldr	r3, [pc, #112]	; (800514c <prvHeapInit+0xb0>)
 80050dc:	2200      	movs	r2, #0
 80050de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	4413      	add	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80050e8:	2208      	movs	r2, #8
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0307 	bic.w	r3, r3, #7
 80050f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4a15      	ldr	r2, [pc, #84]	; (8005150 <prvHeapInit+0xb4>)
 80050fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80050fe:	4b14      	ldr	r3, [pc, #80]	; (8005150 <prvHeapInit+0xb4>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2200      	movs	r2, #0
 8005104:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005106:	4b12      	ldr	r3, [pc, #72]	; (8005150 <prvHeapInit+0xb4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	1ad2      	subs	r2, r2, r3
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800511c:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <prvHeapInit+0xb4>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	4a0a      	ldr	r2, [pc, #40]	; (8005154 <prvHeapInit+0xb8>)
 800512a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	4a09      	ldr	r2, [pc, #36]	; (8005158 <prvHeapInit+0xbc>)
 8005132:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005134:	4b09      	ldr	r3, [pc, #36]	; (800515c <prvHeapInit+0xc0>)
 8005136:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800513a:	601a      	str	r2, [r3, #0]
}
 800513c:	bf00      	nop
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	200007ac 	.word	0x200007ac
 800514c:	200013ac 	.word	0x200013ac
 8005150:	200013b4 	.word	0x200013b4
 8005154:	200013bc 	.word	0x200013bc
 8005158:	200013b8 	.word	0x200013b8
 800515c:	200013c0 	.word	0x200013c0

08005160 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005168:	4b27      	ldr	r3, [pc, #156]	; (8005208 <prvInsertBlockIntoFreeList+0xa8>)
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	e002      	b.n	8005174 <prvInsertBlockIntoFreeList+0x14>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	429a      	cmp	r2, r3
 800517c:	d8f7      	bhi.n	800516e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	4413      	add	r3, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	429a      	cmp	r2, r3
 800518e:	d108      	bne.n	80051a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	441a      	add	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	441a      	add	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d118      	bne.n	80051e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	4b14      	ldr	r3, [pc, #80]	; (800520c <prvInsertBlockIntoFreeList+0xac>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d00d      	beq.n	80051de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	441a      	add	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	e008      	b.n	80051f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051de:	4b0b      	ldr	r3, [pc, #44]	; (800520c <prvInsertBlockIntoFreeList+0xac>)
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	e003      	b.n	80051f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d002      	beq.n	80051fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051fe:	bf00      	nop
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	bc80      	pop	{r7}
 8005206:	4770      	bx	lr
 8005208:	200013ac 	.word	0x200013ac
 800520c:	200013b4 	.word	0x200013b4

08005210 <__libc_init_array>:
 8005210:	b570      	push	{r4, r5, r6, lr}
 8005212:	2600      	movs	r6, #0
 8005214:	4d0c      	ldr	r5, [pc, #48]	; (8005248 <__libc_init_array+0x38>)
 8005216:	4c0d      	ldr	r4, [pc, #52]	; (800524c <__libc_init_array+0x3c>)
 8005218:	1b64      	subs	r4, r4, r5
 800521a:	10a4      	asrs	r4, r4, #2
 800521c:	42a6      	cmp	r6, r4
 800521e:	d109      	bne.n	8005234 <__libc_init_array+0x24>
 8005220:	f000 f822 	bl	8005268 <_init>
 8005224:	2600      	movs	r6, #0
 8005226:	4d0a      	ldr	r5, [pc, #40]	; (8005250 <__libc_init_array+0x40>)
 8005228:	4c0a      	ldr	r4, [pc, #40]	; (8005254 <__libc_init_array+0x44>)
 800522a:	1b64      	subs	r4, r4, r5
 800522c:	10a4      	asrs	r4, r4, #2
 800522e:	42a6      	cmp	r6, r4
 8005230:	d105      	bne.n	800523e <__libc_init_array+0x2e>
 8005232:	bd70      	pop	{r4, r5, r6, pc}
 8005234:	f855 3b04 	ldr.w	r3, [r5], #4
 8005238:	4798      	blx	r3
 800523a:	3601      	adds	r6, #1
 800523c:	e7ee      	b.n	800521c <__libc_init_array+0xc>
 800523e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005242:	4798      	blx	r3
 8005244:	3601      	adds	r6, #1
 8005246:	e7f2      	b.n	800522e <__libc_init_array+0x1e>
 8005248:	08005330 	.word	0x08005330
 800524c:	08005330 	.word	0x08005330
 8005250:	08005330 	.word	0x08005330
 8005254:	08005334 	.word	0x08005334

08005258 <memset>:
 8005258:	4603      	mov	r3, r0
 800525a:	4402      	add	r2, r0
 800525c:	4293      	cmp	r3, r2
 800525e:	d100      	bne.n	8005262 <memset+0xa>
 8005260:	4770      	bx	lr
 8005262:	f803 1b01 	strb.w	r1, [r3], #1
 8005266:	e7f9      	b.n	800525c <memset+0x4>

08005268 <_init>:
 8005268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526a:	bf00      	nop
 800526c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800526e:	bc08      	pop	{r3}
 8005270:	469e      	mov	lr, r3
 8005272:	4770      	bx	lr

08005274 <_fini>:
 8005274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005276:	bf00      	nop
 8005278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527a:	bc08      	pop	{r3}
 800527c:	469e      	mov	lr, r3
 800527e:	4770      	bx	lr
